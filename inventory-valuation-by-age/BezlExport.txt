{
  "id": "d6bd25f3-6c60-4fa2-ba2b-3dfbd905fd68",
  "name": "Inventory Value By Age",
  "template": "custom",
  "owner": "aellis@saberlogic.com",
  "shares": [],
  "vars": [],
  "dataSubscriptions": [
    {
      "name": "SummaryData",
      "connectionId": "b9084b1e-48b6-45e7-a5e3-d68fe28f7d70",
      "dataSource": "brdb",
      "plugin": "ExcelPlugin",
      "method": "GetData",
      "args": {
        "FileName": "C:\\Program Files (x86)\\Bezlio Remote Data Broker\\Data\\inventory.xlsx",
        "SheetName": "Inventory",
        "FirstRowColumnNames": "Yes"
      },
      "data": null,
      "refreshInverval": 0,
      "lastRefresh": null
    }
  ],
  "markup": [
    "<div class=\"panel\">",
    "  <div class=\"pad-all\">",
    "    <p class=\"text-lg text-semibold\">",
    "      <i class=\"fa fa-heartbeat\"></i> ",
    "      Inventory Value By Age",
    "      <i *ngIf=\"bezl.vars.refreshing == false\" style=\"cursor: pointer; cursor: hand;\" class=\"fa fa-refresh\" (click)=\"bezl.functions['refresh']('SummaryData')\"></i>",
    "      <i *ngIf=\"bezl.vars.refreshing == true\" style=\"cursor: not-allowed;\" class=\"fa fa-refresh fa-spin\"></i>",
    "    </p>",
    "  </div>",
    "  <div class=\"pad-all\">",
    "    <div id=\"chartContainer\"></div>",
    "  </div>",
    "</div>"
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.vars.refreshing = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.refreshing = true;\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\n\nif (bezl.data.SummaryData != null && bezl.data.SummaryData.length > 0) {\n\n  // First loop through the data to come up with a few of the summary items we need to build the chart\n  var maxAge = 0;\n  var totalCost = 0;\n  var locations = [];\n  bezl.data.SummaryData.forEach(d => {   \n    if (d.Age > maxAge) {\n      maxAge = d.Age;\n    }\n\n    var existing = (<any>locations).find(l => l.name == d.Location);\n    if (!existing) {\n      locations.push({name: d.Location, totalCost: Math.round(d.Cost), data: [ { label: d.Product, value: d.Cost, sValue: d.Age } ]});\n    } else {\n      existing.totalCost += d.Cost;\n      existing.data.push({ label: d.Product, value: Math.round(d.Cost), sValue: d.Age });\n    }\n\n    totalCost += d.Cost;\n  });\n\n  // Now set up the chart object how we want it\n  bezl.vars.dataSource = {\n    chart: {\n      animation: 0,\n      hideTitle: 1,\n      plotToolText: '<div><b>$label</b><br/> <b>Cost: </b>$$dataValue<br/><b>Age: </b>$svalue days</div>',\n      spacex: 0,\n      spacey: 0,\n      horizontalPadding: 1,\n      verticalPadding: 1,\n      hoveronallsiblingleaves: 1,\n      plotborderthickness: .5,\n      plotbordercolor: '666666',\n      legendpadding: 0,\n      legendItemFontSize: 10,\n      legendItemFontBold: 1,\n      showLegend: 1,\n      legendPointerWidth: 8,\n      legenditemfontcolor: '3d5c5c',\n      algorithm: 'squarified',\n      legendScaleLineThickness: 0,\n      legendCaptionFontSize: 10,\n      legendaxisbordercolor: 'bfbfbf',\n      legendCaption: 'Age (Days)',\n      theme: 'zune'\n    },\n    colorrange: {\n      mapbypercent: 0,\n      gradient: 1,\n      minvalue: 0,\n      code: 'ffffff',\n      startlabel: 'Newer',\n      endlabel: 'Older',\n      color: [\n        {\n          code: 'e24b1a',\n          maxvalue: maxAge,\n          label: 'AVERAGE'\n        }\n      ]\n    },\n    data: [\n      {\n        label: 'Total',\n        fillcolor: \"8c8c8c\",\n        value: totalCost,\n        data: []\n      }\n    ]\n  };\n\n  // Next add in each location and its data\n  locations.forEach(l => {\n    bezl.vars.dataSource.data[0].data.push({\n      label: l.name,\n      value: l.totalCost,\n      data: l.data\n    });\n  }); \n\n\n  try {\n    FusionCharts.options.SVGDefinitionURL = 'absolute';\n    if  (FusionCharts('d7b7e0b1-484e-441d-bd35-3946773136cc')) {\n      FusionCharts('d7b7e0b1-484e-441d-bd35-3946773136cc').dispose();\n    } \n\n    bezl.vars.chart = new FusionCharts ({\n      type: 'treemap',\n      renderAt: $(bezl.container.nativeElement).find(\"#chartContainer\")[0],\n      width: '100%',\n      height: (($(bezl.container.nativeElement)[0].clientHeight > 300) ? $(bezl.container.nativeElement)[0].clientHeight - 85 : 300),\n      id: 'd7b7e0b1-484e-441d-bd35-3946773136cc',\n      dataFormat:'json',\n      dataSource: bezl.vars.dataSource\n    }).render();\n\n    // Prevent the drill-down logic as it is too taxing on mobile devices\n    bezl.vars.chart.addEventListener(\"beforeDrillDown\", function(eventObj, dataObj) {\n      eventObj.preventDefault();\n      eventObj.stopPropagation();\n    });\n  }\n  catch(err) {\n    console.log(err);\n  }\n\n  bezl.vars.refreshing = false;\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.data = dataResp;\r\nif (bezl.data.SummaryData != null && bezl.data.SummaryData.length > 0) {\r\n    // First loop through the data to come up with a few of the summary items we need to build the chart\r\n    var maxAge = 0;\r\n    var totalCost = 0;\r\n    var locations = [];\r\n    bezl.data.SummaryData.forEach(function (d) {\r\n        if (d.Age > maxAge) {\r\n            maxAge = d.Age;\r\n        }\r\n        var existing = locations.find(function (l) { return l.name == d.Location; });\r\n        if (!existing) {\r\n            locations.push({ name: d.Location, totalCost: Math.round(d.Cost), data: [{ label: d.Product, value: d.Cost, sValue: d.Age }] });\r\n        }\r\n        else {\r\n            existing.totalCost += d.Cost;\r\n            existing.data.push({ label: d.Product, value: Math.round(d.Cost), sValue: d.Age });\r\n        }\r\n        totalCost += d.Cost;\r\n    });\r\n    // Now set up the chart object how we want it\r\n    bezl.vars.dataSource = {\r\n        chart: {\r\n            animation: 0,\r\n            hideTitle: 1,\r\n            plotToolText: '<div><b>$label</b><br/> <b>Cost: </b>$$dataValue<br/><b>Age: </b>$svalue days</div>',\r\n            spacex: 0,\r\n            spacey: 0,\r\n            horizontalPadding: 1,\r\n            verticalPadding: 1,\r\n            hoveronallsiblingleaves: 1,\r\n            plotborderthickness: .5,\r\n            plotbordercolor: '666666',\r\n            legendpadding: 0,\r\n            legendItemFontSize: 10,\r\n            legendItemFontBold: 1,\r\n            showLegend: 1,\r\n            legendPointerWidth: 8,\r\n            legenditemfontcolor: '3d5c5c',\r\n            algorithm: 'squarified',\r\n            legendScaleLineThickness: 0,\r\n            legendCaptionFontSize: 10,\r\n            legendaxisbordercolor: 'bfbfbf',\r\n            legendCaption: 'Age (Days)',\r\n            theme: 'zune'\r\n        },\r\n        colorrange: {\r\n            mapbypercent: 0,\r\n            gradient: 1,\r\n            minvalue: 0,\r\n            code: 'ffffff',\r\n            startlabel: 'Newer',\r\n            endlabel: 'Older',\r\n            color: [\r\n                {\r\n                    code: 'e24b1a',\r\n                    maxvalue: maxAge,\r\n                    label: 'AVERAGE'\r\n                }\r\n            ]\r\n        },\r\n        data: [\r\n            {\r\n                label: 'Total',\r\n                fillcolor: \"8c8c8c\",\r\n                value: totalCost,\r\n                data: []\r\n            }\r\n        ]\r\n    };\r\n    // Next add in each location and its data\r\n    locations.forEach(function (l) {\r\n        bezl.vars.dataSource.data[0].data.push({\r\n            label: l.name,\r\n            value: l.totalCost,\r\n            data: l.data\r\n        });\r\n    });\r\n    try {\r\n        FusionCharts.options.SVGDefinitionURL = 'absolute';\r\n        if (FusionCharts('d7b7e0b1-484e-441d-bd35-3946773136cc')) {\r\n            FusionCharts('d7b7e0b1-484e-441d-bd35-3946773136cc').dispose();\r\n        }\r\n        bezl.vars.chart = new FusionCharts({\r\n            type: 'treemap',\r\n            renderAt: $(bezl.container.nativeElement).find(\"#chartContainer\")[0],\r\n            width: '100%',\r\n            height: (($(bezl.container.nativeElement)[0].clientHeight > 300) ? $(bezl.container.nativeElement)[0].clientHeight - 85 : 300),\r\n            id: 'd7b7e0b1-484e-441d-bd35-3946773136cc',\r\n            dataFormat: 'json',\r\n            dataSource: bezl.vars.dataSource\r\n        }).render();\r\n        // Prevent the drill-down logic as it is too taxing on mobile devices\r\n        bezl.vars.chart.addEventListener(\"beforeDrillDown\", function (eventObj, dataObj) {\r\n            eventObj.preventDefault();\r\n            eventObj.stopPropagation();\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n    bezl.vars.refreshing = false;\r\n}\r\n"
    },
    {
      "method": "refresh",
      "code": "bezl.vars.refreshing = true;\nbezl.dataService.process('SummaryData');",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.refreshing = true;\r\nbezl.dataService.process('SummaryData');\r\n"
    }
  ],
  "data": ""
}