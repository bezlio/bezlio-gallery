{
  "id": "02e12d96-d03b-4788-ac8d-8245cadc1e4e",
  "name": "Crystal Reports Viewer - Localized",
  "template": "custom",
  "owner": "kcrane@saberlogic.com",
  "shares": [],
  "vars": [],
  "dataSubscriptions": [
    {
      "name": "ReportListing",
      "connectionId": "11eab4b4-999d-467a-86cb-b48dd077f20c",
      "dataSource": "brdb",
      "plugin": "CrystalReports",
      "method": "GetReportList",
      "args": "{\"FolderName\":\"Default\"}",
      "data": null,
      "refreshInverval": 0,
      "lastRefresh": null
    }
  ],
  "markup": [
    "<div class=\"row\">",
    "  ",
    "  <!-- Report Selection Sidebar -->",
    "  <div [ngClass]=\"{'col-sm-3': !bezl.vars.reportSelected}\" [hidden]=\"bezl.vars.reportSelected\">",
    "    <table class=\"table table-hover\">",
    "      <thead>",
    "        <tr>",
    "          <th style=\"padding: 0 !important; margin: 0 !important;\">",
    "            <!-- This is the normal button layout for a big screen.  The small layout will follow -->",
    "            <div class=\"btn-group btn-group-justified hidden-xs\" role=\"group\" aria-label=\"Justified button group\">",
    "              <div class=\"btn-group\" role=\"group\">",
    "                <button type=\"button\"",
    "                        (click)=\"bezl.functions['sort']('BaseName')\"",
    "                        class=\"btn btn-default\">",
    "                  <span class=\"pull-left\">Report Name</span>",
    "                  <i class=\"fa fa-sort-alpha-asc pull-right\" aria-hidden=\"true\" ",
    "                     *ngIf=\"bezl.vars.sortCol == 'BaseName' && bezl.vars.sort == 'asc'\"></i>",
    "                  <i class=\"fa fa-sort-alpha-desc pull-right\" aria-hidden=\"true\" ",
    "                     *ngIf=\"bezl.vars.sortCol == 'BaseName' && bezl.vars.sort == 'desc'\"></i>",
    "                </button>",
    "              </div>",
    "              <div class=\"btn-group\">",
    "                <button class=\"btn btn-default\"",
    "                        *ngIf=\"!bezl.vars.reportListingLoading\"",
    "                        (click)=\"bezl.functions['refresh']()\">",
    "                  <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i> Refresh",
    "                </button>",
    "              </div>",
    "            </div>",
    "",
    "            <!-- This is the normal button layout for small screens -->",
    "            <div class=\"visible-xs\">",
    "              <div class=\"row\">",
    "                <div class=\"col-sm-12\">",
    "                  Sort By: <br />",
    "                  <div class=\"btn-group\">",
    "                    <button type=\"button\"",
    "                            (click)=\"bezl.functions['sort']('BaseName')\"",
    "                            class=\"btn btn-default btn-mobile\"",
    "                            >",
    "                      <span class=\"pull-left\">Report Name</span>",
    "                      <i class=\"fa fa-sort-alpha-asc pull-right\" aria-hidden=\"true\" ",
    "                         *ngIf=\"bezl.vars.sortCol == 'ID' && bezl.vars.sort == 'asc'\"></i>",
    "                      <i class=\"fa fa-sort-alpha-desc pull-right\" aria-hidden=\"true\" ",
    "                         *ngIf=\"bezl.vars.sortCol == 'ID' && bezl.vars.sort == 'desc'\"></i>",
    "                    </button>",
    "                  </div>",
    "                </div>",
    "              </div>",
    "            </div>",
    "",
    "            <label style=\"margin-top:8px;margin-left:10px\" [hidden]=\"!bezl.vars.reportListingLoading\">Loading... ",
    "                <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i>",
    "            </label>            ",
    "            ",
    "          </th>",
    "        </tr>",
    "      </thead>",
    "      ",
    "      <tbody>",
    "       <tr class=\"read\" ",
    "           *ngFor=\"let item of bezl.data.ReportListing\" ",
    "           (click)=\"bezl.functions['runReport'](item)\"",
    "           [ngClass]=\"{'default': !item.Selected, 'success': item.Selected}\">",
    "         <td>{{item.BaseName}}</td>",
    "       </tr>",
    "      </tbody>",
    "    </table>",
    "  </div>",
    "  <!-- END: Report Selection Sidebar -->",
    "  ",
    "  <!-- Selected Report Body -->",
    "  <div [ngClass]=\"{'col-sm-9': !bezl.vars.reportSelected, 'col-sm-12': bezl.vars.reportSelected}\">",
    "    ",
    "    <nav class=\"navbar navbar-default\">",
    "      <div class=\"container-fluid\">",
    "        ",
    "        <div class=\"navbar-header\" [hidden]=\"bezl.vars.reportLoading || !bezl.vars.selectedReport.BaseName\">",
    "          <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#selectedReportTools\"> <span class=\"sr-only\"> Toggle navigation </span>",
    "            <span class=\"icon-bar\"></span>",
    "            <span class=\"icon-bar\"></span>",
    "            <span class=\"icon-bar\"></span>",
    "          </button>",
    "        </div>",
    "        ",
    "        <div class=\"collapse navbar-collapse\" id=\"selectedReportTools\" style=\"padding-left: 0px;\">          ",
    "          <ul class=\"nav navbar-nav navbar-left\">",
    "            <li style=\"padding-right:20px; margin-top: 6px;\"><h4>{{bezl.vars.selectedReport.BaseName}}</h4></li>",
    "            ",
    "            <li>",
    "              <div [hidden]=\"bezl.vars.reportLoading || !bezl.vars.selectedReport.BaseName\">",
    "                <button id=\"previous\" class=\"btn btn-default\" [disabled]=\"bezl.vars.pageNum == 1\" style=\"margin-top:8px\">",
    "                  <i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i>Previous</button>",
    "              </div>",
    "            </li>",
    "",
    "            <li style=\"padding-right:10px\">",
    "              <div [hidden]=\"bezl.vars.reportLoading || !bezl.vars.selectedReport.BaseName\">",
    "                <button id=\"next\" class=\"btn btn-default\" [disabled]=\"bezl.vars.pageNum == bezl.vars.totalPages\" style=\"margin-top:8px\">",
    "                  <i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i>Next</button>",
    "              </div>",
    "            </li>",
    "            ",
    "            <li class=\"hidden-xs\">",
    "              <div [hidden]=\"bezl.vars.reportLoading || !bezl.vars.selectedReport.BaseName\">",
    "                <div class=\"col-sm-6\">",
    "                  <input class=\"form-control\" type=\"number\" [(ngModel)]=\"bezl.vars.pageNum\" min=\"1\" ",
    "                         style=\"width: 65px; margin-top:8px; padding-top: 7.75px; padding-bottom: 7.75px;\"",
    "                         (change)=\"bezl.vars.queueRenderPage(bezl.vars.pageNum)\">",
    "",
    "                </div>",
    "                <div class=\"col-sm-6\">",
    "                \t<span class=\"navbar-text\" style=\"margin-top:15.75px; margin-bottom: 13.5px; margin-left: 2px;\"> of {{bezl.vars.totalPages}}</span>",
    "                </div>",
    "              </div>",
    "            </li>",
    "            ",
    "            <li>",
    "              <div class=\"btn-group\"",
    "                   *ngIf=\"!bezl.vars.reportLoading && bezl.vars.selectedReport.BaseName\"",
    "                   style=\"margin-top:8px\">                                ",
    "                <button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" type=\"button\">",
    "                  Zoom <i class=\"fa fa-search-plus\" aria-hidden=\"true\"></i>",
    "                </button>",
    "                <ul class=\"dropdown-menu dropdown-menu-right\">",
    "                  <li><a (click)=\"bezl.vars.scale = 'auto';bezl.vars.queueRenderPage(bezl.vars.pageNum)\">Auto</a></li>",
    "                  <li><a (click)=\"bezl.vars.scale = 0.5;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">50%</a></li>",
    "                  <li><a (click)=\"bezl.vars.scale = 0.75;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">75%</a></li>",
    "                  <li><a (click)=\"bezl.vars.scale = 1.0;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">100%</a></li>",
    "                  <li><a (click)=\"bezl.vars.scale = 1.5;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">150%</a></li>",
    "                  <li><a (click)=\"bezl.vars.scale = 2.0;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">200%</a></li>",
    "                  <li><a (click)=\"bezl.vars.scale = 3.0;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">300%</a></li>",
    "                  <li><a (click)=\"bezl.vars.scale = 4.0;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">400%</a></li>",
    "                </ul>",
    "              </div>",
    "            </li>",
    "            ",
    "          </ul>",
    "         ",
    "          <ul class=\"nav navbar-nav navbar-right\">",
    "            <li>",
    "              <div class=\"btn-group\"",
    "                   *ngIf=\"!bezl.vars.reportLoading && bezl.vars.selectedReport.BaseName\"",
    "                   style=\"margin-top:8px\">                                ",
    "                <button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" type=\"button\">",
    "                  Save As...<i class=\"dropdown-caret\"></i>",
    "                </button>",
    "                <ul class=\"dropdown-menu dropdown-menu-right\">",
    "                  <li class=\"dropdown-header\">PDF</li>",
    "                  <li><a (click)=\"bezl.functions['saveReport']({selectedReport:bezl.vars.selectedReport, saveAs:'Adobe Acrobat (PDF)'})\">Adobe Acrobat (PDF)</a></li>",
    "                  <li class=\"divider\"></li>",
    "                  <li class=\"dropdown-header\">Excel</li>",
    "                  <li><a (click)=\"bezl.functions['saveReport']({selectedReport:bezl.vars.selectedReport, saveAs:'Microsoft Excel 97-2000 (XLS)'})\">Microsoft Excel 97-2000 (XLS)</a></li>",
    "                  <li><a (click)=\"bezl.functions['saveReport']({selectedReport:bezl.vars.selectedReport, saveAs:'Microsoft Excel 97-2000 - Data Only (XLS)'})\">Microsoft Excel 97-2000 - Data Only (XLS)</a></li>",
    "                  <li><a (click)=\"bezl.functions['saveReport']({selectedReport:bezl.vars.selectedReport, saveAs:'Microsoft Excel Workbook Data-Only (XLSX)'})\">Microsoft Excel Workbook Data-Only (XLSX)</a></li>",
    "                  <li class=\"divider\"></li>",
    "                  <li class=\"dropdown-header\">Word</li>",
    "                  <li><a (click)=\"bezl.functions['saveReport']({selectedReport:bezl.vars.selectedReport, saveAs:'Microsoft Word (DOC)'})\">Microsoft Word (DOC)</a></li>",
    "                  <li class=\"divider\"></li>",
    "                  <li class=\"dropdown-header\">Other</li>",
    "                  <li><a (click)=\"bezl.functions['saveReport']({selectedReport:bezl.vars.selectedReport, saveAs:'Rich Text Format (RTF)'})\">Rich Text Format (RTF)</a></li>",
    "                  <li><a (click)=\"bezl.functions['saveReport']({selectedReport:bezl.vars.selectedReport, saveAs:'Separated Values (CSV)'})\">Separated Values (CSV)</a></li>",
    "                  <li><a (click)=\"bezl.functions['saveReport']({selectedReport:bezl.vars.selectedReport, saveAs:'Extensible Markup Language (XML)'})\">Extensible Markup Language (XML)</a></li>",
    "                </ul>",
    "              </div>",
    "            </li>",
    "            <li><button class=\"btn btn-default\" style=\"margin-top:8px\"",
    "                        *ngIf=\"!bezl.vars.reportLoading && bezl.vars.selectedReport.BaseName\"",
    "                        (click)=\"bezl.functions['runReport'](bezl.vars.selectedReport)\">",
    "              <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i> Refresh</button></li>",
    "            <li><button class=\"btn btn-default\" style=\"margin-top:8px\"",
    "                        *ngIf=\"!bezl.vars.reportLoading && bezl.vars.selectedReport ",
    "              \t\t\t&& bezl.vars.selectedReport.ReportDetails.ParameterFields.length > 0\"",
    "                        (click)=\"bezl.functions['updateParameters'](bezl.vars.selectedReport)\">",
    "              <i class=\"fa fa-question\" aria-hidden=\"true\"></i> Update Parameters</button></li>",
    "            <li><button class=\"btn btn-default\" style=\"margin-top:8px\"",
    "                        *ngIf=\"bezl.vars.reportSelected\"",
    "                        (click)=\"bezl.functions['back']()\">",
    "              <i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i> Back</button></li>",
    "            <li><label class=\"pull-right\" style=\"margin-top:8px;margin-left:10px\"",
    "                       [hidden]=\"!bezl.vars.reportLoading || bezl.vars.promptForParameters\">Loading... ",
    "              <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i>",
    "              </label>",
    "            </li>",
    "          </ul>",
    "        </div><!-- /.navbar-collapse -->",
    "      </div><!-- /.container-fluid -->",
    "    </nav>",
    "    ",
    "    <h3 class=\"hidden-xs\" *ngIf=\"!bezl.vars.reportSelected\">No Report Selected</h3>",
    "        ",
    "    <!-- Parameter Input -->",
    "    <div class=\"row\" ",
    "         *ngFor=\"let param of bezl.vars.selectedReport.ReportDetails.ParameterFields\"",
    "         [hidden]=\"!bezl.vars.promptForParameters\">",
    "      <div *ngIf=\"param.ReportName == ''\">",
    "",
    "        <div class=\"panel panel-default\" style=\"margin-left: 7.5px; margin-right: -7.5px;\">",
    "          <div class=\"panel-heading\">",
    "            <h5 class=\"panel-title\">{{param.PromptText}}</h5>",
    "          </div>",
    "          <div class=\"panel-body\">",
    "            ",
    "            <!-- Single Value  -->",
    "            <div *ngIf=\"!param.EnableAllowMultipleValue && ",
    "                        param.DefaultValues.length == 0 &&",
    "                        param.DiscreteOrRangeKind == 0\">",
    "              <div class=\"row\">",
    "                <div class=\"col-sm-12\">",
    "                  <!-- String input -->",
    "                  <input class=\"form-control\" type=\"text\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 4\">",
    "                  ",
    "                  <!-- Date input -->",
    "                  <input class=\"form-control\" type=\"date\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 3\"> ",
    "                  ",
    "                  <!-- Number input -->",
    "                  <input class=\"form-control\" type=\"number\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 0 || param.ParameterValueType == 1\">",
    "                  ",
    "                  <!-- Boolean input -->",
    "                  <input class=\"form-control\" type=\"checkbox\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 2\">",
    "                  ",
    "                  <!-- DateTime input -->",
    "                  <input class=\"form-control\" type=\"datetime-local\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 5\"> ",
    "                  ",
    "                  <!-- Time input -->",
    "                  <input class=\"form-control\" type=\"time\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 6\"> ",
    "                </div>",
    "              </div>",
    "              <button (click)=\"param.Value = ''\" class=\"btn btn-md btn-default\" style=\"width:100%;margin-top:10px\">Clear</button>",
    "            </div>",
    "            <!-- END: Single Value -->",
    "            ",
    "            <!-- Single Value / Default Values / No Custom -->",
    "            <div *ngIf=\"!param.EnableAllowMultipleValue && ",
    "                        !param.AllowCustomValues && ",
    "                        param.DefaultValues.length > 0 &&",
    "                        param.DiscreteOrRangeKind == 0\">",
    "              <div class=\"row\">",
    "                <div class=\"col-sm-12\">",
    "                  <select class=\"form-control\" [(ngModel)]=\"param.Value\" [required]=\"!param.IsOptionalPrompt\">",
    "                    <option *ngFor=\"let item of param.DefaultValues\" [value]=\"item.Value\">{{item.Value}}</option>",
    "                  </select>",
    "                </div>",
    "              </div>",
    "              <button (click)=\"param.Value = '';param.AddValue = ''\" class=\"btn btn-md btn-default\" style=\"width:100%;margin-top:10px\">Clear</button>",
    "            </div>",
    "            <!-- END: Single Value / Default Values / No Custom -->",
    "            ",
    "            <!-- String Parameter / Single Value / Default Values / Allow Custom -->",
    "            <div *ngIf=\"!param.EnableAllowMultipleValue && ",
    "                        param.AllowCustomValues && ",
    "                        param.DefaultValues.length > 0 &&",
    "                        param.DiscreteOrRangeKind == 0\">",
    "              <div class=\"row\">",
    "                <div class=\"col-sm-6\">",
    "                  <select class=\"form-control\" [(ngModel)]=\"param.Value\" [required]=\"!param.IsOptionalPrompt\">",
    "                    <option *ngFor=\"let item of param.DefaultValues\" [value]=\"item.Value\">{{item.Value}}</option>",
    "                  </select>",
    "                </div>",
    "                <div class=\"col-sm-6\">                  ",
    "                  <!-- String input -->",
    "                  <input class=\"form-control\" type=\"text\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 4\">",
    "                  ",
    "                  <!-- Date input -->",
    "                  <input class=\"form-control\" type=\"date\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 3\"> ",
    "                  ",
    "                  <!-- Number input -->",
    "                  <input class=\"form-control\" type=\"number\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 0 || param.ParameterValueType == 1\">",
    "                  ",
    "                  <!-- Boolean input -->",
    "                  <input class=\"form-control\" type=\"checkbox\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 2\">",
    "                  ",
    "                  <!-- DateTime input -->",
    "                  <input class=\"form-control\" type=\"datetime-local\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 5\"> ",
    "                  ",
    "                  <!-- Time input -->",
    "                  <input class=\"form-control\" type=\"time\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value\"",
    "                         *ngIf=\"param.ParameterValueType == 6\"> ",
    "                </div>",
    "              </div>",
    "              <button (click)=\"param.Value = '';param.AddValue = ''\" class=\"btn btn-md btn-default\" style=\"width:100%;margin-top:10px\">Clear</button>",
    "            </div>",
    "            <!-- END: String Parameter / Single Value / Default Values / Allow Custom -->",
    "",
    "            <!-- String Parameter / Multi Value -->",
    "            <div *ngIf=\"param.ParameterValueType == 4 && ",
    "                        param.EnableAllowMultipleValue &&",
    "                        param.DiscreteOrRangeKind == 0\">",
    "              <div class=\"row\">",
    "                <div class=\"col-sm-5\">",
    "                  <select class=\"form-control\" [(ngModel)]=\"param.AddValue\" ",
    "                          (change)=\"bezl.functions['addParameterValue'](param)\"",
    "                          [required]=\"!param.IsOptionalPrompt\" >",
    "                    <option *ngFor=\"let item of param.DefaultValues\" [value]=\"item.Value\">{{item.Value}}</option>",
    "                  </select>   ",
    "                </div>",
    "                <div class=\"col-sm-5\">               ",
    "                  <!-- String input -->",
    "                  <input class=\"form-control\" type=\"text\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt && param.Value.length == 0\" ",
    "                         [(ngModel)]=\"param.AddValue\"",
    "                         *ngIf=\"param.ParameterValueType == 4\"",
    "                         (keyup.enter)=\"bezl.functions['addParameterValue'](param)\">",
    "                  ",
    "                  <!-- Date input -->",
    "                  <input class=\"form-control\" type=\"date\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt && param.Value.length == 0\" ",
    "                         [(ngModel)]=\"param.AddValue\"",
    "                         *ngIf=\"param.ParameterValueType == 3\"> ",
    "                  ",
    "                  <!-- Number input -->",
    "                  <input class=\"form-control\" type=\"number\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt && param.Value.length == 0\" ",
    "                         [(ngModel)]=\"param.AddValue\"",
    "                         *ngIf=\"param.ParameterValueType == 0 || param.ParameterValueType == 1\"",
    "                         (keyup.enter)=\"bezl.functions['addParameterValue'](param)\">",
    "                  ",
    "                  <!-- Boolean input -->",
    "                  <input class=\"form-control\" type=\"checkbox\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt && param.Value.length == 0\" ",
    "                         [(ngModel)]=\"param.AddValue\"",
    "                         *ngIf=\"param.ParameterValueType == 2\">",
    "                  ",
    "                  <!-- DateTime input -->",
    "                  <input class=\"form-control\" type=\"datetime-local\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt && param.Value.length == 0\" ",
    "                         [(ngModel)]=\"param.AddValue\"",
    "                         *ngIf=\"param.ParameterValueType == 5\"> ",
    "                  ",
    "                  <!-- Time input -->",
    "                  <input class=\"form-control\" type=\"time\" placeholder=\"Other Value\"",
    "                         [required]=\"!param.IsOptionalPrompt && param.Value.length == 0\" ",
    "                         [(ngModel)]=\"param.AddValue\"",
    "                         *ngIf=\"param.ParameterValueType == 6\"> ",
    "                  ",
    "                </div>",
    "                <div class=\"col-sm-2\">",
    "                  <button (click)=\"bezl.functions['addParameterValue'](param)\" class=\"btn btn-md btn-default\" style=\"width:100%;height:28px\">",
    "                    <i class=\"fa fa-plus-square-o\" aria-hidden=\"true\"></i>",
    "                  </button>",
    "                </div>",
    "              </div>",
    "              <div class=\"row\" *ngFor=\"let v of param.Value; let i = index;\">",
    "                <div class=\"col-sm-10\">",
    "                  <input class=\"form-control\" type=\"text\" [(ngModel)]=\"param.Value[i]\" readonly>",
    "                </div>",
    "                <div class=\"col-sm-2\">",
    "                  <button (click)=\"param.Value.splice(i,1)\" class=\"btn btn-md btn-default\" style=\"width:100%;height:28px\">",
    "                    <i class=\"fa fa-minus-square-o\" aria-hidden=\"true\"></i>",
    "                  </button>",
    "                </div>",
    "              </div>",
    "",
    "              <button (click)=\"param.Value.splice(0)\" class=\"btn btn-md btn-default\" style=\"width:100%;margin-top:10px\">Remove All</button>",
    "            </div>",
    "            <!-- END: String Parameter / Multi Value -->",
    "            ",
    "            <!-- String Parameter / Range / Single Value  -->",
    "            <div *ngIf=\"!param.EnableAllowMultipleValue && ",
    "                        param.DefaultValues.length == 0 &&",
    "                        param.DiscreteOrRangeKind == 1\">",
    "              <div class=\"row\">",
    "                <div class=\"col-sm-6\">                 ",
    "                  <!-- String input -->",
    "                  <input class=\"form-control\" type=\"text\" placeholder=\"From\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.StartValue\"",
    "                         *ngIf=\"param.ParameterValueType == 4\">",
    "                  ",
    "                  <!-- Date input -->",
    "                  <input class=\"form-control\" type=\"date\" placeholder=\"From\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.StartValue\"",
    "                         *ngIf=\"param.ParameterValueType == 3\"> ",
    "                  ",
    "                  <!-- Number input -->",
    "                  <input class=\"form-control\" type=\"number\" placeholder=\"From\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.StartValue\"",
    "                         *ngIf=\"param.ParameterValueType == 0 || param.ParameterValueType == 1\">",
    "                  ",
    "                  <!-- Boolean input -->",
    "                  <input class=\"form-control\" type=\"checkbox\" placeholder=\"From\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.StartValue\"",
    "                         *ngIf=\"param.ParameterValueType == 2\">",
    "                  ",
    "                  <!-- DateTime input -->",
    "                  <input class=\"form-control\" type=\"datetime-local\" placeholder=\"From\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.StartValue\"",
    "                         *ngIf=\"param.ParameterValueType == 5\"> ",
    "                  ",
    "                  <!-- Time input -->",
    "                  <input class=\"form-control\" type=\"time\" placeholder=\"From\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.StartValue\"",
    "                         *ngIf=\"param.ParameterValueType == 6\"> ",
    "                  ",
    "                </div>",
    "                <div class=\"col-sm-6\">                 ",
    "                  <!-- String input -->",
    "                  <input class=\"form-control\" type=\"text\" placeholder=\"To\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.EndValue\"",
    "                         *ngIf=\"param.ParameterValueType == 4\">",
    "                  ",
    "                  <!-- Date input -->",
    "                  <input class=\"form-control\" type=\"date\" placeholder=\"To\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.EndValue\"",
    "                         *ngIf=\"param.ParameterValueType == 3\"> ",
    "                  ",
    "                  <!-- Number input -->",
    "                  <input class=\"form-control\" type=\"number\" placeholder=\"To\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.EndValue\"",
    "                         *ngIf=\"param.ParameterValueType == 0 || param.ParameterValueType == 1\">",
    "                  ",
    "                  <!-- Boolean input -->",
    "                  <input class=\"form-control\" type=\"checkbox\" placeholder=\"To\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.EndValue\"",
    "                         *ngIf=\"param.ParameterValueType == 2\">",
    "                  ",
    "                  <!-- DateTime input -->",
    "                  <input class=\"form-control\" type=\"datetime-local\" placeholder=\"To\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.EndValue\"",
    "                         *ngIf=\"param.ParameterValueType == 5\"> ",
    "                  ",
    "                  <!-- Time input -->",
    "                  <input class=\"form-control\" type=\"time\" placeholder=\"To\"",
    "                         [required]=\"!param.IsOptionalPrompt\" ",
    "                         [(ngModel)]=\"param.Value.EndValue\"",
    "                         *ngIf=\"param.ParameterValueType == 6\"> ",
    "                </div>",
    "              </div>",
    "              <button (click)=\"param.Value = '';param.Value.StartValue = '';param.Value.EndValue = ''\" class=\"btn btn-md btn-default\" style=\"width:100%;margin-top:10px\">Clear</button>",
    "            </div>",
    "            <!-- END: String Parameter / Single Value / Dynamic -->",
    "            ",
    "          </div>",
    "        </div>",
    "      </div>",
    "    </div>",
    "    ",
    "    <div [hidden]=\"!bezl.vars.promptForParameters\">",
    "      <div class=\"btn-group btn-group-justified\" role=\"group\" aria-label=\"Justified button group\">",
    "        <div class=\"btn-group\" role=\"group\">",
    "          <button (click)=\"bezl.functions['runReport'](bezl.vars.selectedReport)\" ",
    "                  class=\"btn btn-md btn-default\">Ok</button>",
    "        </div>",
    "        <div class=\"btn-group\" role=\"group\">",
    "          <button (click)=\"bezl.vars.reportSelected=false\" class=\"btn btn-md btn-default\">Cancel</button>",
    "        </div>      ",
    "      </div>",
    "    </div>",
    "    <!-- END: Parameter Input -->",
    "    ",
    "    <!-- Report Output -->",
    "    <div [hidden]=\"!bezl.vars.reportSelected || bezl.vars.promptForParameters\">",
    "    \t<canvas id=\"viewer\"></canvas>",
    "    </div>",
    "    <!-- END: Report Output -->",
    "    ",
    "  </div>",
    "  <!-- END: Selected Report Body -->",
    "  ",
    "</div>",
    "",
    "<pre>{{ bezl.vars.selectedReport.ReportDetails | json }}</pre>",
    "",
    ""
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.vars.selectedReport = { \"ReportDetails\" : { \"ParameterFields\" : [] } };\n\n/*\nbezl.functions['setConfig']();\nrequire([bezl.vars.config.baseJsUrl + 'onStartup.js'], function(functions) {\n\tfunctions.onStartup(bezl)\n});\n*/\n\nbezl.functions['onStartup']();",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts",
        "flatpickr"
      ],
      "compiled": "bezl.vars.selectedReport = { \"ReportDetails\": { \"ParameterFields\": [] } };\r\n/*\r\nbezl.functions['setConfig']();\r\nrequire([bezl.vars.config.baseJsUrl + 'onStartup.js'], function(functions) {\r\n    functions.onStartup(bezl)\r\n});\r\n*/\r\nbezl.functions['onStartup']();\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\nbezl.functions['setConfig']();\n\n/*\nrequire([bezl.vars.config.baseJsUrl + 'onDataChange.js'], function(functions) {\n  functions.onDataChange(bezl)\n});\n*/\n\nif (bezl.data.ReportListing) {\n  bezl.vars.reportListingLoading = false;\n}\n\nif (bezl.data.Report) {\n  var pdfData = atob(bezl.data.Report);\n  // Clean up data subscription as we no longer need it\n  bezl.dataService.remove('Report');\n  bezl.data.Report = null;\n\n  require.config({\n    paths: {'pdfjs-dist': 'https://npmcdn.com/pdfjs-dist'}\n  });\n  require(['pdfjs-dist/build/pdf'], function (PDFJS) {\n\n    // Using DocumentInitParameters object to load binary data.\n    var loadingTask = PDFJS.getDocument({data: pdfData});\n    loadingTask.promise.then(function(pdfDoc_) {\n\n      bezl.vars.pdfDoc = pdfDoc_;\n      bezl.vars.pageNum = 1;\n      bezl.vars.pageRendering = false;\n      bezl.vars.pageNumPending = null;\n      bezl.vars.scale = \"auto\";\n      bezl.vars.canvas = document.getElementById('viewer');\n      bezl.vars.ctx = bezl.vars.canvas.getContext('2d');\n      bezl.vars.totalPages = bezl.vars.pdfDoc.numPages;\n\n      // Initial/first page rendering\n      bezl.vars.renderPage(bezl.vars.pageNum);    \n\n      // Wire up controls to functions for PDF viewer\n      document.getElementById('next').addEventListener('click', bezl.vars.onNextPage);\n      document.getElementById('previous').addEventListener('click', bezl.vars.onPrevPage);\n\n    }, function (reason) {\n      // PDF loading error\n      console.error(reason);\n    });\n\n  });\n\n  bezl.vars.reportLoading = false;\n}\n\nif (bezl.data.SaveReport) {\n  var sliceSize = 1024;\n  var byteCharacters = atob(bezl.data.SaveReport);\n  var bytesLength = byteCharacters.length;\n  var slicesCount = Math.ceil(bytesLength / sliceSize);\n  var byteArrays = new Array(slicesCount);\n  for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    var begin = sliceIndex * sliceSize;\n    var end = Math.min(begin + sliceSize, bytesLength);\n    var bytes = new Array(end - begin);\n    for (var offset = begin, i = 0 ; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\n    }\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\n  }\n\n  var mimeType = \"application/octet-stream\"; // Sane default\n\n  //require([bezl.vars.config.baseLibraryUrl + 'mimeTypes.js'], function(mime) {\n\n\n  mimeType = GetMimeTypeFromExtension(bezl.vars.saveAsFileExtension);\n\n  var file = new Blob(byteArrays, {type: mimeType});\n  FileSaver.saveAs(file, bezl.vars.selectedReport.BaseName + bezl.vars.saveAsFileExtension);\n\n  bezl.vars.reportLoading = false;\n\n  // Clean up data subscription as we no longer need it\n  bezl.dataService.remove('SaveReport');\n  bezl.data.SaveReport = null;\n\n\n}\n\nfunction GetMimeTypeFromExtension (extension) {\n  switch(extension) {\n    case \".doc\": return \"application/msword\"; break;\n    case \".docx\": return \"application/msword\"; break;\n    case \".dot\": return \"application/msword\"; break;\n    case \".onetoc\": return \"application/onenote\"; break;\n    case \".onetoc2\": return \"application/onenote\"; break;\n    case \".onetmp\": return \"application/onenote\"; break;\n    case \".onepkg\": return \"application/onenote\"; break;\n    case \".pdf\": return \"application/pdf\"; break;\n    case \".ai\": return \"application/postscript\"; break;\n    case \".eps\": return \"application/postscript\"; break;\n    case \".ps\": return \"application/postscript\"; break;\n    case \".xls\": return \"application/vnd.ms-excel\"; break;\n    case \".xlm\": return \"application/vnd.ms-excel\"; break;\n    case \".xla\": return \"application/vnd.ms-excel\"; break;\n    case \".xlc\": return \"application/vnd.ms-excel\"; break;\n    case \".xlt\": return \"application/vnd.ms-excel\"; break;\n    case \".xlw\": return \"application/vnd.ms-excel\"; break;\n    case \".xlam\": return \"application/vnd.ms-excel.addin.macroenabled.12\"; break;\n    case \".xlsb\": return \"application/vnd.ms-excel.sheet.binary.macroenabled.12\"; break;\n    case \".xlsm\": return \"application/vnd.ms-excel.sheet.macroenabled.12\"; break;\n    case \".xltm\": return \"application/vnd.ms-excel.template.macroenabled.12\"; break;\n    case \".ppt\": return \"application/vnd.ms-powerpoint\"; break;\n    case \".pps\": return \"application/vnd.ms-powerpoint\"; break;\n    case \".pot\": return \"application/vnd.ms-powerpoint\"; break;\n    case \".ppam\": return \"application/vnd.ms-powerpoint.addin.macroenabled.12\"; break;\n    case \".pptm\": return \"application/vnd.ms-powerpoint.presentation.macroenabled.12\"; break;\n    case \".sldm\": return \"application/vnd.ms-powerpoint.slide.macroenabled.12\"; break;\n    case \".ppsm\": return \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\"; break;\n    case \".potm\": return \"application/vnd.ms-powerpoint.template.macroenabled.12\"; break;\n    case \".mpp\": return \"application/vnd.ms-project\"; break;\n    case \".mpt\": return \"application/vnd.ms-project\"; break;\n    case \".docm\": return \"application/vnd.ms-word.document.macroenabled.12\"; break;\n    case \".dotm\": return \"application/vnd.ms-word.template.macroenabled.12\"; break;\n    case \".wps\": return \"application/vnd.ms-works\"; break;\n    case \".wks\": return \"application/vnd.ms-works\"; break;\n    case \".wcm\": return \"application/vnd.ms-works\"; break;\n    case \".wdb\": return \"application/vnd.ms-works\"; break;\n    case \".wpl\": return \"application/vnd.ms-wpl\"; break;\n    case \".xps\": return \"application/vnd.ms-xpsdocument\"; break;\n    case \".oxt\": return \"application/vnd.openofficeorg.extension\"; break;\n    case \".pptx\": return \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"; break;\n    case \".sldx\": return \"application/vnd.openxmlformats-officedocument.presentationml.slide\"; break;\n    case \".ppsx\": return \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\"; break;\n    case \".potx\": return \"application/vnd.openxmlformats-officedocument.presentationml.template\"; break;\n    case \".xlsx\": return \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"; break;\n    case \".xltx\": return \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\"; break;\n    case \".dotx\": return \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\"; break;\n    case \".bmp\": return \"image/bmp\"; break;\n    case \".gif\": return \"image/gif\"; break;\n    case \".jpeg\": return \"image/jpeg\"; break;\n    case \".jpg\": return \"image/jpeg\"; break;\n    case \".jpe\": return \"image/jpeg\"; break;\n    case \".pict\": return \"image/pict\"; break;\n    case \".pic\": return \"image/pict\"; break;\n    case \".pct\": return \"image/pict\"; break;\n    case \".png\": return \"image/png\"; break;\n    case \".svg\": return \"image/svg+xml\"; break;\n    case \".svgz\": return \"image/svg+xml\"; break;\n    case \".tiff\": return \"image/tiff\"; break;\n    case \".tif\": return \"image/tiff\"; break;\n    case \".psd\": return \"image/vnd.adobe.photoshop\"; break;\n    case \".dwg\": return \"image/vnd.dwg\"; break;\n    case \".dxf\": return \"image/vnd.dxf\"; break;\n    case \".csv\": return \"text/csv\"; break;\n    case \".html\": return \"text/html\"; break;\n    case \".htm\": return \"text/html\"; break;\n    case \".txt\": return \"text/plain\"; break;\n    case \".text\": return \"text/plain\"; break;\n    default:\n      return \"application/octet-stream\";\n  }\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts",
        "FileSaver"
      ],
      "compiled": "bezl.data = dataResp;\r\nbezl.functions['setConfig']();\r\n/*\r\nrequire([bezl.vars.config.baseJsUrl + 'onDataChange.js'], function(functions) {\r\n  functions.onDataChange(bezl)\r\n});\r\n*/\r\nif (bezl.data.ReportListing) {\r\n    bezl.vars.reportListingLoading = false;\r\n}\r\nif (bezl.data.Report) {\r\n    var pdfData = atob(bezl.data.Report);\r\n    // Clean up data subscription as we no longer need it\r\n    bezl.dataService.remove('Report');\r\n    bezl.data.Report = null;\r\n    require.config({\r\n        paths: { 'pdfjs-dist': 'https://npmcdn.com/pdfjs-dist' }\r\n    });\r\n    require(['pdfjs-dist/build/pdf'], function (PDFJS) {\r\n        // Using DocumentInitParameters object to load binary data.\r\n        var loadingTask = PDFJS.getDocument({ data: pdfData });\r\n        loadingTask.promise.then(function (pdfDoc_) {\r\n            bezl.vars.pdfDoc = pdfDoc_;\r\n            bezl.vars.pageNum = 1;\r\n            bezl.vars.pageRendering = false;\r\n            bezl.vars.pageNumPending = null;\r\n            bezl.vars.scale = \"auto\";\r\n            bezl.vars.canvas = document.getElementById('viewer');\r\n            bezl.vars.ctx = bezl.vars.canvas.getContext('2d');\r\n            bezl.vars.totalPages = bezl.vars.pdfDoc.numPages;\r\n            // Initial/first page rendering\r\n            bezl.vars.renderPage(bezl.vars.pageNum);\r\n            // Wire up controls to functions for PDF viewer\r\n            document.getElementById('next').addEventListener('click', bezl.vars.onNextPage);\r\n            document.getElementById('previous').addEventListener('click', bezl.vars.onPrevPage);\r\n        }, function (reason) {\r\n            // PDF loading error\r\n            console.error(reason);\r\n        });\r\n    });\r\n    bezl.vars.reportLoading = false;\r\n}\r\nif (bezl.data.SaveReport) {\r\n    var sliceSize = 1024;\r\n    var byteCharacters = atob(bezl.data.SaveReport);\r\n    var bytesLength = byteCharacters.length;\r\n    var slicesCount = Math.ceil(bytesLength / sliceSize);\r\n    var byteArrays = new Array(slicesCount);\r\n    for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\r\n        var begin = sliceIndex * sliceSize;\r\n        var end = Math.min(begin + sliceSize, bytesLength);\r\n        var bytes = new Array(end - begin);\r\n        for (var offset = begin, i = 0; offset < end; ++i, ++offset) {\r\n            bytes[i] = byteCharacters[offset].charCodeAt(0);\r\n        }\r\n        byteArrays[sliceIndex] = new Uint8Array(bytes);\r\n    }\r\n    var mimeType = \"application/octet-stream\"; // Sane default\r\n    //require([bezl.vars.config.baseLibraryUrl + 'mimeTypes.js'], function(mime) {\r\n    mimeType = GetMimeTypeFromExtension(bezl.vars.saveAsFileExtension);\r\n    var file = new Blob(byteArrays, { type: mimeType });\r\n    FileSaver.saveAs(file, bezl.vars.selectedReport.BaseName + bezl.vars.saveAsFileExtension);\r\n    bezl.vars.reportLoading = false;\r\n    // Clean up data subscription as we no longer need it\r\n    bezl.dataService.remove('SaveReport');\r\n    bezl.data.SaveReport = null;\r\n}\r\nfunction GetMimeTypeFromExtension(extension) {\r\n    switch (extension) {\r\n        case \".doc\":\r\n            return \"application/msword\";\r\n            break;\r\n        case \".docx\":\r\n            return \"application/msword\";\r\n            break;\r\n        case \".dot\":\r\n            return \"application/msword\";\r\n            break;\r\n        case \".onetoc\":\r\n            return \"application/onenote\";\r\n            break;\r\n        case \".onetoc2\":\r\n            return \"application/onenote\";\r\n            break;\r\n        case \".onetmp\":\r\n            return \"application/onenote\";\r\n            break;\r\n        case \".onepkg\":\r\n            return \"application/onenote\";\r\n            break;\r\n        case \".pdf\":\r\n            return \"application/pdf\";\r\n            break;\r\n        case \".ai\":\r\n            return \"application/postscript\";\r\n            break;\r\n        case \".eps\":\r\n            return \"application/postscript\";\r\n            break;\r\n        case \".ps\":\r\n            return \"application/postscript\";\r\n            break;\r\n        case \".xls\":\r\n            return \"application/vnd.ms-excel\";\r\n            break;\r\n        case \".xlm\":\r\n            return \"application/vnd.ms-excel\";\r\n            break;\r\n        case \".xla\":\r\n            return \"application/vnd.ms-excel\";\r\n            break;\r\n        case \".xlc\":\r\n            return \"application/vnd.ms-excel\";\r\n            break;\r\n        case \".xlt\":\r\n            return \"application/vnd.ms-excel\";\r\n            break;\r\n        case \".xlw\":\r\n            return \"application/vnd.ms-excel\";\r\n            break;\r\n        case \".xlam\":\r\n            return \"application/vnd.ms-excel.addin.macroenabled.12\";\r\n            break;\r\n        case \".xlsb\":\r\n            return \"application/vnd.ms-excel.sheet.binary.macroenabled.12\";\r\n            break;\r\n        case \".xlsm\":\r\n            return \"application/vnd.ms-excel.sheet.macroenabled.12\";\r\n            break;\r\n        case \".xltm\":\r\n            return \"application/vnd.ms-excel.template.macroenabled.12\";\r\n            break;\r\n        case \".ppt\":\r\n            return \"application/vnd.ms-powerpoint\";\r\n            break;\r\n        case \".pps\":\r\n            return \"application/vnd.ms-powerpoint\";\r\n            break;\r\n        case \".pot\":\r\n            return \"application/vnd.ms-powerpoint\";\r\n            break;\r\n        case \".ppam\":\r\n            return \"application/vnd.ms-powerpoint.addin.macroenabled.12\";\r\n            break;\r\n        case \".pptm\":\r\n            return \"application/vnd.ms-powerpoint.presentation.macroenabled.12\";\r\n            break;\r\n        case \".sldm\":\r\n            return \"application/vnd.ms-powerpoint.slide.macroenabled.12\";\r\n            break;\r\n        case \".ppsm\":\r\n            return \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\";\r\n            break;\r\n        case \".potm\":\r\n            return \"application/vnd.ms-powerpoint.template.macroenabled.12\";\r\n            break;\r\n        case \".mpp\":\r\n            return \"application/vnd.ms-project\";\r\n            break;\r\n        case \".mpt\":\r\n            return \"application/vnd.ms-project\";\r\n            break;\r\n        case \".docm\":\r\n            return \"application/vnd.ms-word.document.macroenabled.12\";\r\n            break;\r\n        case \".dotm\":\r\n            return \"application/vnd.ms-word.template.macroenabled.12\";\r\n            break;\r\n        case \".wps\":\r\n            return \"application/vnd.ms-works\";\r\n            break;\r\n        case \".wks\":\r\n            return \"application/vnd.ms-works\";\r\n            break;\r\n        case \".wcm\":\r\n            return \"application/vnd.ms-works\";\r\n            break;\r\n        case \".wdb\":\r\n            return \"application/vnd.ms-works\";\r\n            break;\r\n        case \".wpl\":\r\n            return \"application/vnd.ms-wpl\";\r\n            break;\r\n        case \".xps\":\r\n            return \"application/vnd.ms-xpsdocument\";\r\n            break;\r\n        case \".oxt\":\r\n            return \"application/vnd.openofficeorg.extension\";\r\n            break;\r\n        case \".pptx\":\r\n            return \"application/vnd.openxmlformats-officedocument.presentationml.presentation\";\r\n            break;\r\n        case \".sldx\":\r\n            return \"application/vnd.openxmlformats-officedocument.presentationml.slide\";\r\n            break;\r\n        case \".ppsx\":\r\n            return \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\";\r\n            break;\r\n        case \".potx\":\r\n            return \"application/vnd.openxmlformats-officedocument.presentationml.template\";\r\n            break;\r\n        case \".xlsx\":\r\n            return \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\r\n            break;\r\n        case \".xltx\":\r\n            return \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\";\r\n            break;\r\n        case \".dotx\":\r\n            return \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\";\r\n            break;\r\n        case \".bmp\":\r\n            return \"image/bmp\";\r\n            break;\r\n        case \".gif\":\r\n            return \"image/gif\";\r\n            break;\r\n        case \".jpeg\":\r\n            return \"image/jpeg\";\r\n            break;\r\n        case \".jpg\":\r\n            return \"image/jpeg\";\r\n            break;\r\n        case \".jpe\":\r\n            return \"image/jpeg\";\r\n            break;\r\n        case \".pict\":\r\n            return \"image/pict\";\r\n            break;\r\n        case \".pic\":\r\n            return \"image/pict\";\r\n            break;\r\n        case \".pct\":\r\n            return \"image/pict\";\r\n            break;\r\n        case \".png\":\r\n            return \"image/png\";\r\n            break;\r\n        case \".svg\":\r\n            return \"image/svg+xml\";\r\n            break;\r\n        case \".svgz\":\r\n            return \"image/svg+xml\";\r\n            break;\r\n        case \".tiff\":\r\n            return \"image/tiff\";\r\n            break;\r\n        case \".tif\":\r\n            return \"image/tiff\";\r\n            break;\r\n        case \".psd\":\r\n            return \"image/vnd.adobe.photoshop\";\r\n            break;\r\n        case \".dwg\":\r\n            return \"image/vnd.dwg\";\r\n            break;\r\n        case \".dxf\":\r\n            return \"image/vnd.dxf\";\r\n            break;\r\n        case \".csv\":\r\n            return \"text/csv\";\r\n            break;\r\n        case \".html\":\r\n            return \"text/html\";\r\n            break;\r\n        case \".htm\":\r\n            return \"text/html\";\r\n            break;\r\n        case \".txt\":\r\n            return \"text/plain\";\r\n            break;\r\n        case \".text\":\r\n            return \"text/plain\";\r\n            break;\r\n        default:\r\n            return \"application/octet-stream\";\r\n    }\r\n}\r\n"
    },
    {
      "method": "runReport",
      "code": "/*\nrequire([bezl.vars.config.baseJsUrl + 'report.js'], function(functions) {\n\tfunctions.runReport(bezl, parm)\n});\n*/\n\nbezl.vars.reportLoading = true;\nbezl.vars.reportSelected = true;\nbezl.vars.selectedReport = parm;\nparm.Selected = true;\n\nfor (var i = 0; i < bezl.data.ReportListing.length; i++) {\n  if (bezl.data.ReportListing[i].Name != parm.Name) {\n    bezl.data.ReportListing[i].Selected = false;\n  }\n};\n\nvar parametersRequired = false;\nif (parm.ReportDetails) {\n  for (var i = 0; i < parm.ReportDetails.ParameterFields.length; i++) {\n    if (parm.ReportDetails.ParameterFields[i].ReportName == ''\n        && parm.ReportDetails.ParameterFields[i].IsOptionalPrompt == false\n        && (parm.ReportDetails.ParameterFields[i].Value == null)) {\n      parametersRequired = true;\n\n      // Also take this time to structure the Value object according to the parameter\n      // type\n      if (parm.ReportDetails.ParameterFields[i].DiscreteOrRangeKind == 1 \n          && parm.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\n        parm.ReportDetails.ParameterFields[i].Value = [{ StartValue: '', EndValue: '' }];\n      } else if (parm.ReportDetails.ParameterFields[i].DiscreteOrRangeKind == 1 \n                 && !parm.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\n        parm.ReportDetails.ParameterFields[i].Value = { StartValue: '', EndValue: '' };\n      } else if (parm.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\n        parm.ReportDetails.ParameterFields[i].Value = [];\n      }\n    }\n  }\n}\n\nif (parametersRequired) {\n  bezl.vars.promptForParameters = true;\n} else {\n  bezl.vars.promptForParameters = false;\n  bezl.dataService.add('Report','brdb','CrystalReports','ReturnAsPDF',\n                       { \"FolderName\": parm.FolderName, \"Connection\": \"Workflow\", \"ReportName\": parm.Name,\n                        \"Parameters\": [\n                          { \"Key\": \"ReportDetails\", \"Value\": JSON.stringify(parm.ReportDetails) }\n                        ] },0);\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "var FusionCharts; /*\r\nrequire([bezl.vars.config.baseJsUrl + 'report.js'], function(functions) {\r\n    functions.runReport(bezl, parm)\r\n});\r\n*/\r\nbezl.vars.reportLoading = true;\r\nbezl.vars.reportSelected = true;\r\nbezl.vars.selectedReport = parm;\r\nparm.Selected = true;\r\nfor (var i = 0; i < bezl.data.ReportListing.length; i++) {\r\n    if (bezl.data.ReportListing[i].Name != parm.Name) {\r\n        bezl.data.ReportListing[i].Selected = false;\r\n    }\r\n}\r\n;\r\nvar parametersRequired = false;\r\nif (parm.ReportDetails) {\r\n    for (var i = 0; i < parm.ReportDetails.ParameterFields.length; i++) {\r\n        if (parm.ReportDetails.ParameterFields[i].ReportName == '' && parm.ReportDetails.ParameterFields[i].IsOptionalPrompt == false && (parm.ReportDetails.ParameterFields[i].Value == null)) {\r\n            parametersRequired = true;\r\n            // Also take this time to structure the Value object according to the parameter\r\n            // type\r\n            if (parm.ReportDetails.ParameterFields[i].DiscreteOrRangeKind == 1 && parm.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\r\n                parm.ReportDetails.ParameterFields[i].Value = [{ StartValue: '', EndValue: '' }];\r\n            }\r\n            else if (parm.ReportDetails.ParameterFields[i].DiscreteOrRangeKind == 1 && !parm.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\r\n                parm.ReportDetails.ParameterFields[i].Value = { StartValue: '', EndValue: '' };\r\n            }\r\n            else if (parm.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\r\n                parm.ReportDetails.ParameterFields[i].Value = [];\r\n            }\r\n        }\r\n    }\r\n}\r\nif (parametersRequired) {\r\n    bezl.vars.promptForParameters = true;\r\n}\r\nelse {\r\n    bezl.vars.promptForParameters = false;\r\n    bezl.dataService.add('Report', 'brdb', 'CrystalReports', 'ReturnAsPDF', { \"FolderName\": parm.FolderName, \"Connection\": \"Workflow\", \"ReportName\": parm.Name, \"Parameters\": [\r\n        { \"Key\": \"ReportDetails\", \"Value\": JSON.stringify(parm.ReportDetails) }\r\n    ] }, 0);\r\n}\r\n"
    },
    {
      "method": "addParameterValue",
      "code": "/*\nrequire([bezl.vars.config.baseJsUrl + 'report.js'], function(functions) {\n\tfunctions.addParameterValue(bezl, parm)\n});\n*/\n\nif (parm.ParameterValueType == 4 && parm.EnableAllowMultipleValue) {  \t\n  parm.Value.push(parm.AddValue); \n  parm.AddValue = \"\";\n} else if (parm.ParameterValueType == 4 && !parm.EnableAllowMultipleValue) {\n  parm.Value = parm.AddValue;\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "var FusionCharts; /*\r\nrequire([bezl.vars.config.baseJsUrl + 'report.js'], function(functions) {\r\n    functions.addParameterValue(bezl, parm)\r\n});\r\n*/\r\nif (parm.ParameterValueType == 4 && parm.EnableAllowMultipleValue) {\r\n    parm.Value.push(parm.AddValue);\r\n    parm.AddValue = \"\";\r\n}\r\nelse if (parm.ParameterValueType == 4 && !parm.EnableAllowMultipleValue) {\r\n    parm.Value = parm.AddValue;\r\n}\r\n"
    },
    {
      "method": "back",
      "code": "/*\nrequire([bezl.vars.config.baseJsUrl + 'report.js'], function(functions) {\n\tfunctions.back(bezl)\n});\n*/\n\nbezl.vars.reportSelected=false;\nbezl.vars.selectedReport = { \"ReportDetails\" : { \"ParameterFields\" : [] } };\nbezl.vars.promptForParameters = false;\nbezl.vars.reportLoading = false;\nvar viewer = $(bezl.container.nativeElement).find('#viewer')[0];\nviewer.src = 'about:blank';",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "var FusionCharts; /*\r\nrequire([bezl.vars.config.baseJsUrl + 'report.js'], function(functions) {\r\n    functions.back(bezl)\r\n});\r\n*/\r\nbezl.vars.reportSelected = false;\r\nbezl.vars.selectedReport = { \"ReportDetails\": { \"ParameterFields\": [] } };\r\nbezl.vars.promptForParameters = false;\r\nbezl.vars.reportLoading = false;\r\nvar viewer = $(bezl.container.nativeElement).find('#viewer')[0];\r\nviewer.src = 'about:blank';\r\n"
    },
    {
      "method": "updateParameters",
      "code": "bezl.vars['promptForParameters'] = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars['promptForParameters'] = true;\r\n"
    },
    {
      "method": "setConfig",
      "code": "//bezl.vars.config = {};\n\n// *********************************************************************************\n// Configuration Variables\n// Only edit these if you know what you are doing.\n// version: The version number of this app. Setting this vill use the javascript\n//          include files in the corresponding \"versions\" subfolder. An empty string\n//          will use the \"development\" javascript files in the root directory.\n// libVersion: The version number of the library javascript include files to use.\n// baseUrl: The base URL of the javascript include files. Generally this should be an\n//          empty string and the correct path will be automatically determined.\n//          However, for development you may wish to point this to a RawGit URL of\n//          a specific branch (e.g. https://rawgit.com/bezlio/bezlio-apps/my-branch).\n//bezl.vars.config.version = \"1.4\";\n//bezl.vars.config.libVersion = \"1.1\";\n//bezl.vars.config.baseUrl = \"https://bezlio-gallery.azurewebsites.net\";\n// *********************************************************************************\n\n// If version numbers exist above they will also be added to the javascript include URLs\n//bezl.vars.config.baseJsUrl = bezl.vars.config.baseUrl\n//  \t\t\t\t\t\t\t+ \"/crystal-reports-viewer/\"\n//  \t\t\t\t\t\t\t+ (bezl.vars.config.version ? \"versions/\" + bezl.vars.config.version + \"/\" : \"\")\n//  \t\t\t\t\t\t\t+ \"js/\"\n//bezl.vars.config.baseLibraryUrl = bezl.vars.config.baseUrl\n//  \t\t\t\t\t\t\t+ \"/libraries/\"\n//\t\t\t\t\t\t\t+ (bezl.vars.config.libVersion ? \"versions/\" + bezl.vars.config.libVersion + \"/\" : \"\")",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "var FusionCharts; //bezl.vars.config = {};\r\n// *********************************************************************************\r\n// Configuration Variables\r\n// Only edit these if you know what you are doing.\r\n// version: The version number of this app. Setting this vill use the javascript\r\n//          include files in the corresponding \"versions\" subfolder. An empty string\r\n//          will use the \"development\" javascript files in the root directory.\r\n// libVersion: The version number of the library javascript include files to use.\r\n// baseUrl: The base URL of the javascript include files. Generally this should be an\r\n//          empty string and the correct path will be automatically determined.\r\n//          However, for development you may wish to point this to a RawGit URL of\r\n//          a specific branch (e.g. https://rawgit.com/bezlio/bezlio-apps/my-branch).\r\n//bezl.vars.config.version = \"1.4\";\r\n//bezl.vars.config.libVersion = \"1.1\";\r\n//bezl.vars.config.baseUrl = \"https://bezlio-gallery.azurewebsites.net\";\r\n// *********************************************************************************\r\n// If version numbers exist above they will also be added to the javascript include URLs\r\n//bezl.vars.config.baseJsUrl = bezl.vars.config.baseUrl\r\n//  \t\t\t\t\t\t\t+ \"/crystal-reports-viewer/\"\r\n//  \t\t\t\t\t\t\t+ (bezl.vars.config.version ? \"versions/\" + bezl.vars.config.version + \"/\" : \"\")\r\n//  \t\t\t\t\t\t\t+ \"js/\"\r\n//bezl.vars.config.baseLibraryUrl = bezl.vars.config.baseUrl\r\n//  \t\t\t\t\t\t\t+ \"/libraries/\"\r\n//\t\t\t\t\t\t\t+ (bezl.vars.config.libVersion ? \"versions/\" + bezl.vars.config.libVersion + \"/\" : \"\") \r\n"
    },
    {
      "method": "sort",
      "code": "/*\nrequire([bezl.vars.config.baseJsUrl + 'report.js'], function(functions) {\n\tfunctions.sort(bezl, parm)\n});\n*/\n\nvar sortColumn = parm;\n\n// If the previous sort column was picked, make it the opposite sort\nif (bezl.vars.sortCol == sortColumn) {\n  if (bezl.vars.sort == \"desc\") {\n    bezl.vars.sort = \"asc\";\n  } else {\n    bezl.vars.sort = \"desc\";\n  }\n} else {\n  bezl.vars.sort = \"asc\";\n}\n\n// Store the sort column so the UI can reflect it\nbezl.vars.sortCol = sortColumn;\n\n// Sort alphabetic\nif (bezl.vars.sort == \"asc\") { \n  bezl.data.ReportListing.sort(function(a, b) {\n    var A = a[sortColumn] .toUpperCase(); // ignore upper and lowercase\n    var B = b[sortColumn] .toUpperCase(); // ignore upper and lowercase\n    if (A < B) {\n      return -1;\n    }\n    if (A > B) {\n      return 1;\n    }\n\n    // names must be equal\n    return 0;\n  });\n} else {\n  bezl.data.ReportListing.sort(function(a, b) {\n    var A = a[sortColumn] .toUpperCase(); // ignore upper and lowercase\n    var B = b[sortColumn] .toUpperCase(); // ignore upper and lowercase\n    if (A > B) {\n      return -1;\n    }\n    if (A < B) {\n      return 1;\n    }\n\n    // names must be equal\n    return 0;\n  });\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "var FusionCharts; /*\r\nrequire([bezl.vars.config.baseJsUrl + 'report.js'], function(functions) {\r\n    functions.sort(bezl, parm)\r\n});\r\n*/\r\nvar sortColumn = parm;\r\n// If the previous sort column was picked, make it the opposite sort\r\nif (bezl.vars.sortCol == sortColumn) {\r\n    if (bezl.vars.sort == \"desc\") {\r\n        bezl.vars.sort = \"asc\";\r\n    }\r\n    else {\r\n        bezl.vars.sort = \"desc\";\r\n    }\r\n}\r\nelse {\r\n    bezl.vars.sort = \"asc\";\r\n}\r\n// Store the sort column so the UI can reflect it\r\nbezl.vars.sortCol = sortColumn;\r\n// Sort alphabetic\r\nif (bezl.vars.sort == \"asc\") {\r\n    bezl.data.ReportListing.sort(function (a, b) {\r\n        var A = a[sortColumn].toUpperCase(); // ignore upper and lowercase\r\n        var B = b[sortColumn].toUpperCase(); // ignore upper and lowercase\r\n        if (A < B) {\r\n            return -1;\r\n        }\r\n        if (A > B) {\r\n            return 1;\r\n        }\r\n        // names must be equal\r\n        return 0;\r\n    });\r\n}\r\nelse {\r\n    bezl.data.ReportListing.sort(function (a, b) {\r\n        var A = a[sortColumn].toUpperCase(); // ignore upper and lowercase\r\n        var B = b[sortColumn].toUpperCase(); // ignore upper and lowercase\r\n        if (A > B) {\r\n            return -1;\r\n        }\r\n        if (A < B) {\r\n            return 1;\r\n        }\r\n        // names must be equal\r\n        return 0;\r\n    });\r\n}\r\n"
    },
    {
      "method": "refresh",
      "code": "bezl.vars.reportListingLoading = true;\nbezl.vars.sort = \"\";\nbezl.vars.sortCol = \"\";\nbezl.dataService.process('ReportListing')",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.reportListingLoading = true;\r\nbezl.vars.sort = \"\";\r\nbezl.vars.sortCol = \"\";\r\nbezl.dataService.process('ReportListing');\r\n"
    },
    {
      "method": "saveReport",
      "code": "/*\nrequire([bezl.vars.config.baseJsUrl + 'report.js'], function(functions) {\n\tfunctions.saveReport(bezl, parm.selectedReport, parm.saveAs)\n});\n*/\n\nbezl.vars.reportLoading = true;\nbezl.vars.reportSelected = true;\nparm.selectedReport.Selected = true;\nvar getAsType = parm.saveAs;\n\nfor (var i = 0; i < bezl.data.ReportListing.length; i++) {\n  if (bezl.data.ReportListing[i].Name != parm.selectedReport.Name) {\n    bezl.data.ReportListing[i].Selected = false;\n  }\n};\n\nvar parametersRequired = false;\nif (parm.selectedReport.ReportDetails) {\n  for (var i = 0; i < parm.selectedReport.ReportDetails.ParameterFields.length; i++) {\n    if (parm.selectedReport.ReportDetails.ParameterFields[i].ReportName == ''\n        && parm.selectedReport.ReportDetails.ParameterFields[i].IsOptionalPrompt == false\n        && (!parm.selectedReport.ReportDetails.ParameterFields[i].Value)) {\n      parametersRequired = true;\n\n      // Also take this time to structure the Value object according to the parameter\n      // type\n      if (parm.selectedReport.ReportDetails.ParameterFields[i].DiscreteOrRangeKind == 1\n          && parm.selectedReport.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\n        parm.selectedReport.ReportDetails.ParameterFields[i].Value = [{ StartValue: '', EndValue: '' }];\n      } else if (parm.selectedReport.ReportDetails.ParameterFields[i].DiscreteOrRangeKind == 1\n                 && !parm.selectedReport.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\n        parm.selectedReport.ReportDetails.ParameterFields[i].Value = { StartValue: '', EndValue: '' };\n      } else if (parm.selectedReport.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\n        parm.selectedReport.ReportDetails.ParameterFields[i].Value = [];\n      }\n    }\n  }\n}\n\n//if (parametersRequired) {\n//  bezl.vars.promptForParameters = true;\n//} else {\n  bezl.vars.promptForParameters = false;\n\n  // Determine file extension\n  var fileExtension = getAsType.substring(getAsType.lastIndexOf(\"(\")+1, getAsType.lastIndexOf(\")\"));\n  if (!fileExtension.startsWith(\".\")) {\n    fileExtension = \".\" + fileExtension;\n  }\n  bezl.vars.saveAsFileExtension = fileExtension.toLowerCase();\n\n  bezl.dataService.add('SaveReport','brdb','CrystalReports','ReturnReportDataAs',\n                       { \"FolderName\": parm.selectedReport.FolderName, \"Connection\": \"Workflow\", \"ReportName\": parm.selectedReport.Name, \"GetAsType\": getAsType,\n                        \"Parameters\": [\n                          { \"Key\": \"ReportDetails\", \"Value\": JSON.stringify(parm.selectedReport.ReportDetails) }\n                        ] },0);\n//}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "var FusionCharts; /*\r\nrequire([bezl.vars.config.baseJsUrl + 'report.js'], function(functions) {\r\n    functions.saveReport(bezl, parm.selectedReport, parm.saveAs)\r\n});\r\n*/\r\nbezl.vars.reportLoading = true;\r\nbezl.vars.reportSelected = true;\r\nparm.selectedReport.Selected = true;\r\nvar getAsType = parm.saveAs;\r\nfor (var i = 0; i < bezl.data.ReportListing.length; i++) {\r\n    if (bezl.data.ReportListing[i].Name != parm.selectedReport.Name) {\r\n        bezl.data.ReportListing[i].Selected = false;\r\n    }\r\n}\r\n;\r\nvar parametersRequired = false;\r\nif (parm.selectedReport.ReportDetails) {\r\n    for (var i = 0; i < parm.selectedReport.ReportDetails.ParameterFields.length; i++) {\r\n        if (parm.selectedReport.ReportDetails.ParameterFields[i].ReportName == '' && parm.selectedReport.ReportDetails.ParameterFields[i].IsOptionalPrompt == false && (!parm.selectedReport.ReportDetails.ParameterFields[i].Value)) {\r\n            parametersRequired = true;\r\n            // Also take this time to structure the Value object according to the parameter\r\n            // type\r\n            if (parm.selectedReport.ReportDetails.ParameterFields[i].DiscreteOrRangeKind == 1 && parm.selectedReport.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\r\n                parm.selectedReport.ReportDetails.ParameterFields[i].Value = [{ StartValue: '', EndValue: '' }];\r\n            }\r\n            else if (parm.selectedReport.ReportDetails.ParameterFields[i].DiscreteOrRangeKind == 1 && !parm.selectedReport.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\r\n                parm.selectedReport.ReportDetails.ParameterFields[i].Value = { StartValue: '', EndValue: '' };\r\n            }\r\n            else if (parm.selectedReport.ReportDetails.ParameterFields[i].EnableAllowMultipleValue) {\r\n                parm.selectedReport.ReportDetails.ParameterFields[i].Value = [];\r\n            }\r\n        }\r\n    }\r\n}\r\n//if (parametersRequired) {\r\n//  bezl.vars.promptForParameters = true;\r\n//} else {\r\nbezl.vars.promptForParameters = false;\r\n// Determine file extension\r\nvar fileExtension = getAsType.substring(getAsType.lastIndexOf(\"(\") + 1, getAsType.lastIndexOf(\")\"));\r\nif (!fileExtension.startsWith(\".\")) {\r\n    fileExtension = \".\" + fileExtension;\r\n}\r\nbezl.vars.saveAsFileExtension = fileExtension.toLowerCase();\r\nbezl.dataService.add('SaveReport', 'brdb', 'CrystalReports', 'ReturnReportDataAs', { \"FolderName\": parm.selectedReport.FolderName, \"Connection\": \"Workflow\", \"ReportName\": parm.selectedReport.Name, \"GetAsType\": getAsType, \"Parameters\": [\r\n    { \"Key\": \"ReportDetails\", \"Value\": JSON.stringify(parm.selectedReport.ReportDetails) }\r\n] }, 0);\r\n//} \r\n"
    },
    {
      "method": "ngAfterViewInit",
      "code": "",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": ""
    },
    {
      "method": "onStartup",
      "code": "bezl.vars.reportListingLoading = true;\n\n// Define PDF viewer functions\nbezl.vars.renderPage = function(num) {\n  bezl.vars.pageRendering = true;\n  // Using promise to fetch the page\n  bezl.vars.pdfDoc.getPage(num).then(function(page) {\n\n    var viewport = page.getViewport(bezl.vars.scale);\n\n    if (bezl.vars.scale == \"auto\") {\n      bezl.vars.canvas.style.width='100%';\n      bezl.vars.canvas.width  = bezl.vars.canvas.offsetWidth;\n      viewport = page.getViewport(bezl.vars.canvas.width / page.getViewport(1.0).width);\n    } else {\n      bezl.vars.canvas.style.width=null;\n    }\n\n    bezl.vars.canvas.height = viewport.height;\n    bezl.vars.canvas.width = viewport.width;\n\n    // Render PDF page into canvas context\n    var renderContext = {\n      canvasContext: bezl.vars.ctx,\n      viewport: viewport\n    };\n    var renderTask = page.render(renderContext);\n\n    // Wait for rendering to finish\n    renderTask.promise.then(function() {\n      bezl.vars.pageRendering = false;\n      if (bezl.vars.pageNumPending !== null) {\n        // New page rendering is pending\n        bezl.vars.renderPage(bezl.vars.pageNumPending);\n        bezl.vars.pageNumPending = null;\n      }\n    });\n  });                        \n}\n\nbezl.vars.queueRenderPage = function (num) {\n  if (bezl.vars.pageRendering) {\n    bezl.vars.pageNumPending = num;\n  } else {\n    bezl.vars.renderPage(num);\n  }\n};\n\nbezl.vars.onNextPage = function () {\n  if (bezl.vars.pageNum >= bezl.vars.pdfDoc.numPages) {\n    return;\n  }\n  bezl.vars.pageNum++;\n  bezl.vars.queueRenderPage(bezl.vars.pageNum);\n};\n\nbezl.vars.onPrevPage = function() {\n  if (bezl.vars.pageNum <= 1) {\n    return;\n  }\n  bezl.vars.pageNum--;\n  bezl.vars.queueRenderPage(bezl.vars.pageNum);\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.reportListingLoading = true;\r\n// Define PDF viewer functions\r\nbezl.vars.renderPage = function (num) {\r\n    bezl.vars.pageRendering = true;\r\n    // Using promise to fetch the page\r\n    bezl.vars.pdfDoc.getPage(num).then(function (page) {\r\n        var viewport = page.getViewport(bezl.vars.scale);\r\n        if (bezl.vars.scale == \"auto\") {\r\n            bezl.vars.canvas.style.width = '100%';\r\n            bezl.vars.canvas.width = bezl.vars.canvas.offsetWidth;\r\n            viewport = page.getViewport(bezl.vars.canvas.width / page.getViewport(1.0).width);\r\n        }\r\n        else {\r\n            bezl.vars.canvas.style.width = null;\r\n        }\r\n        bezl.vars.canvas.height = viewport.height;\r\n        bezl.vars.canvas.width = viewport.width;\r\n        // Render PDF page into canvas context\r\n        var renderContext = {\r\n            canvasContext: bezl.vars.ctx,\r\n            viewport: viewport\r\n        };\r\n        var renderTask = page.render(renderContext);\r\n        // Wait for rendering to finish\r\n        renderTask.promise.then(function () {\r\n            bezl.vars.pageRendering = false;\r\n            if (bezl.vars.pageNumPending !== null) {\r\n                // New page rendering is pending\r\n                bezl.vars.renderPage(bezl.vars.pageNumPending);\r\n                bezl.vars.pageNumPending = null;\r\n            }\r\n        });\r\n    });\r\n};\r\nbezl.vars.queueRenderPage = function (num) {\r\n    if (bezl.vars.pageRendering) {\r\n        bezl.vars.pageNumPending = num;\r\n    }\r\n    else {\r\n        bezl.vars.renderPage(num);\r\n    }\r\n};\r\nbezl.vars.onNextPage = function () {\r\n    if (bezl.vars.pageNum >= bezl.vars.pdfDoc.numPages) {\r\n        return;\r\n    }\r\n    bezl.vars.pageNum++;\r\n    bezl.vars.queueRenderPage(bezl.vars.pageNum);\r\n};\r\nbezl.vars.onPrevPage = function () {\r\n    if (bezl.vars.pageNum <= 1) {\r\n        return;\r\n    }\r\n    bezl.vars.pageNum--;\r\n    bezl.vars.queueRenderPage(bezl.vars.pageNum);\r\n};\r\n"
    }
  ],
  "data": ""
}