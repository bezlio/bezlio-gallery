{
  "id": "968c8f89-6775-48ee-9247-28d1ce242731",
  "name": "Labor Entry",
  "template": "custom",
  "owner": "crogers@mickeybody.com",
  "shares": [
    "Login:mtbepicorrdp@gmail.com",
    "Login:mtbepicorrdp@gmail.com",
    "Login:bwoodruff@mickeybody.com",
    "Login:mtbepicorrdp@gmail.com",
    "Login:mtbflorida@mickeybody.com",
    "Login:mtbnewjersey@mickeybody.com",
    "Login:bwoodruff@mickeybody.com",
    "Login:bwoodruff@mickeybody.com",
    "Login:mtbepicorrdp@gmail.com",
    "Login:mtbflorida@mickeybody.com",
    "Login:mtbnewjersey@mickeybody.com",
    "Login:mtbncrecontab1@gmail.com",
    "Login:mtbncrecontab2@gmail.com",
    "Login:mtbncrecontab3@gmail.com",
    "Login:mtbncrecontab4@gmail.com"
  ],
  "vars": [
    {
      "name": "pending",
      "value": "{\n  \"clockIn\": false,\n  \"clockOut\": false,\n  \"startActivity\": false,\n  \"endActivity\": false\n}"
    },
    {
      "name": "startVisible",
      "value": "false"
    },
    {
      "name": "showDetail",
      "value": "false"
    },
    {
      "name": "empId",
      "value": "\"\""
    },
    {
      "name": "selected",
      "value": "false"
    },
    {
      "name": "loading",
      "value": "true"
    },
    {
      "name": "employee",
      "value": "{}"
    },
    {
      "name": "startActivity",
      "value": "{}"
    },
    {
      "name": "endActivity",
      "value": "{}"
    },
    {
      "name": "plant",
      "value": "\"ReconFL\""
    },
    {
      "name": "company",
      "value": "\"MTB\""
    },
    {
      "name": "connection",
      "value": "\"New Pilot\""
    },
    {
      "name": "wcCode",
      "value": "\"FL-Labor\""
    }
  ],
  "dataSubscriptions": [
    {
      "name": "getEmployees",
      "connectionId": "332d9dea-e507-4b61-95f8-8c736d03333f",
      "dataSource": "brdb",
      "plugin": "production-worker-queries",
      "method": "ExecuteQuery",
      "args": {
        "QueryName": "/labor-entry/GetEmployees"
      },
      "data": null,
      "refreshInverval": 0,
      "lastRefresh": null
    },
    {
      "name": "Indirects",
      "connectionId": "d882b99e-6363-4e29-87cc-91f7ab66176a",
      "dataSource": "brdb",
      "plugin": "production-worker-queries",
      "method": "ExecuteQuery",
      "args": {
        "QueryName": "labor-entry/GetIndirects"
      },
      "data": null,
      "refreshInverval": 0,
      "lastRefresh": null
    }
  ],
  "markup": [
    "<style>",
    "  .flex-container {",
    "\tdisplay: flex;",
    "    flex-direction: column; ",
    "    width: 100%;   ",
    "    flex-wrap: wrap;",
    "  }",
    "  .flex-inner {",
    "    display: flex;",
    "  \tflex-direction: row; ",
    "  }",
    "  .flex-inner-space {",
    "    display: flex;",
    "  \tflex-direction: row; ",
    "    align-items: center;",
    "    justify-content: space-around;",
    "  }",
    "  .flex-label {",
    "  \tflex-grow: 1;",
    "    margin: 10px;",
    "  }",
    "  .flex-content {",
    "    flex-grow: 2;",
    "    margin: 10px;",
    "  }",
    "  .nonflex-item {",
    "  \tmargin: 10px; ",
    "  }",
    "  label, h4 {",
    "    display:block;",
    "  }",
    "</style>",
    "<label *ngIf=\"bezl.vars['loading']\">Loading Employees... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "<div [hidden]=\"bezl.vars.loading\">",
    "<div class=\"flex-container\"> <!--*ngIf=\"!bezl.vars['loading']\">-->",
    "  <div class=\"flex-inner\" *ngIf=\"bezl.vars.plants\">",
    "    <select class=\"form-control flex-content pull-right\" [(ngModel)]=\"bezl.vars.plant\">",
    "      <option value=\"Corp\" *ngIf=\"bezl.vars.plants.indexOf('Corp') != -1\">Mickey Corporate</option>",
    "      <option value=\"MfgSys\" *ngIf=\"bezl.vars.plants.indexOf('MfgSys') != -1\">High Point Manufacturing</option>",
    "      <option value=\"PA MFG\" *ngIf=\"bezl.vars.plants.indexOf('PA MFG') != -1\">Pennsylvania Mfg.</option>",
    "      <option value=\"ReconFL\" *ngIf=\"bezl.vars.plants.indexOf('ReconFL') != -1\">Recon - Florida</option>",
    "      <option value=\"ReconIL\" *ngIf=\"bezl.vars.plants.indexOf('ReconIL') != -1\">Recon - Illinois</option>",
    "\t  <option value=\"ReconNC\" *ngIf=\"bezl.vars.plants.indexOf('ReconNC') != -1\">Recon - North Carolina</option>",
    "      <option value=\"ReconNJ\" *ngIf=\"bezl.vars.plants.indexOf('ReconNJ') != -1\">Recon - New Jersey</option>",
    "    </select>",
    "  </div>",
    "  <div class=\"flex-inner-space\">",
    "    <h4 class=\"flex-label\">Employee</h4>",
    "    <input class=\"form-control flex-content\" type=\"text\" [(ngModel)]=\"bezl.vars['searchEmpId']\" id=\"empIdInput\">",
    "    <button (click)=\"bezl.functions['selectEmpId'](bezl.vars['searchEmpId'])\" class=\"btn btn-md btn-primary flex-label\" id=\"selectBtn\">Select</button>  ",
    "    <button (click)=\"bezl.functions['selectEmpId']('')\" class=\"btn btn-md btn-danger flex-label\">Clear</button>  ",
    "  </div>",
    "  <div class=\"flex-inner\" *ngIf=\"bezl.vars['pending'].clockIn == true\">",
    "    <label>Clocking In... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "  </div>",
    "  <div class=\"flex-inner\" *ngIf=\"bezl.vars['pending'].clockOut == true\">",
    "    <label>Clocking Out... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "  </div>",
    "  <div class=\"flex-inner\" *ngIf=\"bezl.vars['selected'] == true && bezl.vars['pending'].clockIn == false && bezl.vars['pending'].clockOut == false\">",
    "    <h4 class=\"nonflex-item\">",
    "      {{bezl.vars['employee'].Name}} ",
    "      <span class=\"label label-success\" *ngIf=\"bezl.vars['employee'].LaborHedSeq != null\">A</span>",
    "      <span class=\"label label-danger\" *ngIf=\"bezl.vars['employee'].LaborHedSeq == null\">I</span>",
    "    </h4>",
    "    <button (click)=\"bezl.functions['clockIn']()\" class=\"btn btn-md btn-primary nonflex-item\" *ngIf=\"bezl.vars['employee'].LaborHedSeq == null\">Clock In</button>",
    "    <button (click)=\"bezl.functions['clockOut']()\" class=\"btn btn-md btn-primary nonflex-item\" *ngIf=\"bezl.vars['employee'].LaborHedSeq != null\" [disabled]=\"bezl.vars['employee'].JobNum != null\">Clock Out</button>",
    "    <button (click)=\"bezl.functions['showStartActivity']()\" class=\"btn btn-md btn-success nonflex-item\" *ngIf=\"bezl.vars['employee'].LaborHedSeq != null\" [disabled]=\"bezl.vars['employee'].JobNum != null\">Start Job</button>",
    "    ",
    "    <div class=\"dropdown nonflex-item\" *ngIf=\"bezl.vars['employee'].LaborHedSeq != null\">",
    "      <button class=\"btn btn-success dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" [disabled]=\"bezl.vars['employee'].JobNum != null\">Start Indirect",
    "      <span class=\"caret\"></span></button>",
    "      <ul class=\"dropdown-menu\">",
    "        <li *ngFor=\"let i of bezl.data.Indirects\"><a (click)=\"bezl.functions['startActivity'](i)\">{{i.Description}}</a></li>",
    "      </ul>",
    "    </div>",
    "    ",
    "    <div class=\"nonflex-item\" *ngIf=\"bezl.vars['pending'].startActivity == true\">",
    "      <label>Starting Activity... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "    </div>",
    "    ",
    "  </div>",
    "  <div class=\"flex-inner-space\" *ngIf=\"bezl.vars['selected'] == true\">",
    "    <table class=\"table table-hover flex-content\">",
    "      <thead>",
    "        <tr>",
    "          <th>Current Activity</th>",
    "          <th>Job</th>",
    "          <th>Asm</th>",
    "          <th>Opr</th>",
    "          <th>Indirect</th>",
    "          <th>Resource</th>",
    "        </tr>",
    "      </thead>",
    "      <tbody>",
    "       <tr class=\"read\" (click)=\"bezl.functions['showDetail']()\" *ngIf=\"bezl.vars['employee'].JobNum != null\">",
    "         <td><span class=\"label label-success\">A</span></td>",
    "         <td><h4>{{bezl.vars['employee'].JobNum}}</h4></td>",
    "         <td><h4>{{bezl.vars['employee'].AssemblySeq}}</h4></td>",
    "         <td><h4>{{bezl.vars['employee'].OprSeq}}</h4></td>",
    "         <td><h4>{{bezl.vars['employee'].IndirectDescription}}</h4></td>",
    "         <td><h4>{{bezl.vars['employee'].ResourceID}}</h4></td>",
    "       </tr>",
    "      </tbody>",
    "    </table>",
    "  </div>",
    "  ",
    "  <div class=\"row\" style=\"margin-left: 15px\" *ngIf=\"bezl.vars['selected'] == true && bezl.data.JobAttachments && bezl.data.JobAttachments.length > 0\">",
    "    <h4>Attachments</h4>",
    "  </div>",
    "  <div class=\"row\" style=\"margin-left: 15px\" *ngIf=\"bezl.vars['selected'] == true\">",
    "    <div class=\"col-xs-12 col-sm-4 col-md-2 panel panel-default\" *ngFor=\"let a of bezl.data.JobAttachments\">",
    "      <div class=\"panel-body text-center\" (click)=\"bezl.functions['viewAttachment'](a)\">",
    "        <div class=\"row\">",
    "          <h4><i class=\"fa fa-paperclip\" aria-hidden=\"true\"></i> {{a.FileDesc}}</h4>",
    "        </div>",
    "      </div>",
    "    </div>",
    "  </div>",
    "  ",
    "</div>",
    "</div>",
    "<p-dialog header=\"Start Activity\" [resizable]=\"false\" [(visible)]=\"bezl.vars['startVisible']\" [modal]=\"false\" appendTo=\"body\">",
    "  <div class=\"flex-container\">",
    "    <div class=\"flex-inner-space\">",
    "      <div style=\"float:left;margin-right:20px;\">",
    "        <label for=\"name\">Job</label>",
    "        <input id=\"job\" class=\"form-control\" type=\"text\" [(ngModel)]=\"bezl.vars['startActivity'].JobNum\" (keyup)=\"bezl.functions['jobKeypress']($event)\">",
    "      </div>",
    "      <div style=\"float:left;margin-right:20px;\">",
    "        <label for=\"name\">Asm</label>",
    "        <input class=\"form-control\" type=\"text\" [(ngModel)]=\"bezl.vars['startActivity'].JobAsm\">",
    "      </div>",
    "      <div style=\"float:left;margin-right:20px;\">",
    "        <label for=\"name\">Opr</label>",
    "        <input class=\"form-control\" type=\"text\" id=\"jopOpInput\" [(ngModel)]=\"bezl.vars['startActivity'].JobOp\">",
    "      </div>",
    "    </div>",
    "  </div>",
    "    <footer>",
    "      <div class=\"flex-container\">",
    "        <div class=\"flex-inner-space\" *ngIf=\"bezl.vars['pending'].startActivity == true\">",
    "          <label>Starting Activity... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "        </div>",
    "        <div class=\"flex-inner-space\" *ngIf=\"bezl.vars['pending'].startActivity == false\">",
    "          <button (click)=\"bezl.functions['startActivity']()\" id=\"startActBtn\" class=\"btn btn-lg btn-success mar-bot\">Start Activity</button>",
    "          <button (click)=\"bezl.functions['showStartActivity']()\" class=\"btn btn-lg btn-danger mar-bot\">Close</button>",
    "        </div>",
    "      </div>",
    "      <hr />",
    "    </footer>",
    "</p-dialog>",
    "",
    "<p-dialog header=\"Activity Detail\" [resizable]=\"false\" [(visible)]=\"bezl.vars['showDetail']\" [modal]=\"false\" appendTo=\"body\">",
    "  <div class=\"flex-container\">",
    "    <div class=\"flex-inner-space\">",
    "      <table class=\"table table-hover\">",
    "        <tbody>",
    "         <tr class=\"read\" *ngIf=\"bezl.vars['employee'].JobNum\">",
    "          <td>",
    "            <div style=\"float:left;margin-right:20px;\">",
    "              <label for=\"name\">Job</label>",
    "              <h4>{{bezl.vars['employee'].JobNum}}</h4>",
    "            </div>",
    "           </td>",
    "           <td>    ",
    "             <div style=\"float:left;margin-right:20px;\">",
    "               <label for=\"name\">Asm</label>",
    "               <h4>{{bezl.vars['employee'].AssemblySeq}}</h4>",
    "             </div>",
    "           </td>",
    "           <td>",
    "             <div style=\"float:left;margin-right:20px;\">",
    "               <label for=\"name\">Opr</label>",
    "               <h4>{{bezl.vars['employee'].OprSeq}}</h4>",
    "             </div>",
    "           </td>",
    "          </tr>",
    "          <tr *ngIf=\"bezl.vars['employee'].JobNum\">",
    "            <td>      ",
    "              <div style=\"float:left;margin-right:20px;\">",
    "                <label for=\"name\">Part</label>",
    "                <h4>{{bezl.vars['employee'].PartNum}}</h4>",
    "              </div>",
    "            </td>",
    "            <td colspan=2>      ",
    "              <div style=\"float:left;margin-right:20px;\">",
    "                <label for=\"name\">Description</label>",
    "                <h4>{{bezl.vars['employee'].PartDescription}}</h4>",
    "              </div>",
    "            </td>",
    "          </tr>",
    "          <tr *ngIf=\"bezl.vars['employee'].JobNum\">",
    "            <td>      ",
    "              <div style=\"float:left;margin-right:20px;\">",
    "                <label for=\"name\">Total Qty</label>",
    "                <h4>{{bezl.vars['employee'].TotalQty}}</h4>",
    "              </div>",
    "            </td>",
    "            <td>      ",
    "              <div style=\"float:left;margin-right:20px;\">",
    "                <label for=\"name\">Complete Qty</label>",
    "                <h4>{{bezl.vars['employee'].CompQty}}</h4>",
    "              </div>",
    "            </td>",
    "            <td>      ",
    "              <div style=\"float:left;margin-right:20px;\">",
    "                <label for=\"name\">Due Qty</label>",
    "                <h4>{{bezl.vars['employee'].DueQty}}</h4>",
    "              </div>",
    "            </td>",
    "          </tr>",
    "          ",
    "          <tr *ngIf=\"bezl.vars['employee'].IndirectCode\">",
    "            <td>      ",
    "              <div style=\"float:left;margin-right:20px;\">",
    "                <label for=\"name\">Indirect:</label>",
    "                <h4>{{bezl.vars['employee'].IndirectDescription}}</h4>",
    "              </div>",
    "            </td>",
    "          </tr>",
    "          ",
    "          <tr *ngIf=\"bezl.vars['endActivity'] == {}\" colspan=\"3\">",
    "            <label>Loading Job... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "          </tr>",
    "          <tr *ngIf=\"bezl.vars['endActivity'] != {} && bezl.vars['endActivity'].LaborDtl\">",
    "            <td *ngIf=\"bezl.vars['employee'].JobNum\">      ",
    "              <div style=\"float:left;margin-right:20px;\">",
    "                <label for=\"name\">Complete</label>",
    "                <input class=\"form-control\" type=\"numeric\" [(ngModel)]=\"bezl.vars.laborQty\">",
    "              </div>",
    "            </td>",
    "            <td *ngIf=\"bezl.vars['employee'].JobNum\">      ",
    "              <div style=\"float:left;margin-right:20px;\">",
    "                <label for=\"name\">Scrap</label>",
    "                <input class=\"form-control\" type=\"numeric\" [(ngModel)]=\"bezl.vars.scrapQty\">",
    "              </div>",
    "            </td>",
    "          </tr>",
    "        </tbody>",
    "      </table>",
    "    </div>",
    "  </div>",
    "    <footer>",
    "      <div class=\"flex-container\">",
    "        ",
    "        <div class=\"flex-inner-space\" style=\"\" *ngIf=\"bezl.vars['endActivity'] != {} && bezl.vars['endActivity'].LaborDtl\">",
    "          <div class=\"col-sm-12\">",
    "            <button (click)=\"bezl.functions['endActivity']()\" class=\"btn btn-md btn-danger\" style=\"width: 100%\">End Activity</button>",
    "          </div>",
    "        </div>",
    "        ",
    "        <div class=\"flex-inner-space\" *ngIf=\"bezl.vars['pending'].endActivity == true\">",
    "          <label>Ending Activity... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "        </div>",
    "        <hr>",
    "      </div>",
    "    </footer>",
    "</p-dialog>",
    "",
    "<p-dialog header=\"Attachment View\" ",
    "          [(visible)]=\"bezl.vars.viewAttachment\" ",
    "          [modal]=\"false\" ",
    "          appendTo=\"body\" ",
    "          [height]=\"bezl.vars.dialogHeight\"",
    "          [width]=\"bezl.vars.dialogWidth\"",
    "          (onAfterHide)=\"bezl.functions['closeAttachment']()\">",
    "  ",
    "  <ul class=\"nav navbar-nav navbar-left\">",
    "    <li style=\"padding-right:20px\"><h4>{{bezl.vars.selectedAttachmentName}}</h4></li>",
    "",
    "    <li>",
    "      <div [hidden]=\"bezl.vars.loadingAttachment\">",
    "        <button id=\"previous\" class=\"btn btn-default\" [disabled]=\"bezl.vars.pageNum == 1\" style=\"margin-top:8px\">",
    "          <i class=\"fa fa-arrow-up\" aria-hidden=\"true\"></i>Previous</button>",
    "      </div>",
    "    </li>",
    "",
    "    <li style=\"padding-right:10px\">",
    "      <div [hidden]=\"bezl.vars.loadingAttachment\">",
    "        <button id=\"next\" class=\"btn btn-default\" [disabled]=\"bezl.vars.pageNum == bezl.vars.totalPages\" style=\"margin-top:8px\">",
    "          <i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i>Next</button>",
    "      </div>",
    "    </li>",
    "",
    "    <li class=\"hidden-xs\">",
    "      <div [hidden]=\"bezl.vars.loadingAttachment\">",
    "        <div class=\"col-sm-5\">",
    "          <input class=\"form-control\" type=\"number\" [(ngModel)]=\"bezl.vars.pageNum\" min=\"1\" ",
    "                 style=\"width: 65px; margin-top:8px\"",
    "                 (change)=\"bezl.vars.queueRenderPage(bezl.vars.pageNum)\">",
    "",
    "        </div>",
    "        <div class=\"col-sm-7\">",
    "          <span class=\"navbar-text\" style=\"margin-top:12px\"> of {{bezl.vars.totalPages}}</span>",
    "        </div>",
    "      </div>",
    "    </li>",
    "",
    "    <li>",
    "      <div class=\"btn-group\"",
    "           *ngIf=\"!bezl.vars.loadingAttachment\"",
    "           style=\"margin-top:8px\">                                ",
    "        <button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" type=\"button\">",
    "          Zoom <i class=\"fa fa-search-plus\" aria-hidden=\"true\"></i>",
    "        </button>",
    "        <ul class=\"dropdown-menu dropdown-menu-right\">",
    "          <li><a (click)=\"bezl.vars.scale = 'auto';bezl.vars.queueRenderPage(bezl.vars.pageNum)\">Auto</a></li>",
    "          <li><a (click)=\"bezl.vars.scale = 0.5;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">50%</a></li>",
    "          <li><a (click)=\"bezl.vars.scale = 0.75;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">75%</a></li>",
    "          <li><a (click)=\"bezl.vars.scale = 1.0;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">100%</a></li>",
    "          <li><a (click)=\"bezl.vars.scale = 1.5;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">150%</a></li>",
    "          <li><a (click)=\"bezl.vars.scale = 2.0;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">200%</a></li>",
    "          <li><a (click)=\"bezl.vars.scale = 3.0;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">300%</a></li>",
    "          <li><a (click)=\"bezl.vars.scale = 4.0;bezl.vars.queueRenderPage(bezl.vars.pageNum)\">400%</a></li>",
    "        </ul>",
    "      </div>",
    "    </li>",
    "",
    "  </ul>",
    "  <div class=\"row text-center\">",
    "  \t<label *ngIf=\"bezl.vars.loadingAttachment\">Loading Attachment... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "  </div>",
    "  <div class=\"row\" [hidden]=\"bezl.vars.loadingAttachment\">",
    "  \t<canvas id=\"viewer\">HTML5 Canvas Not Supported</canvas>",
    "  </div>",
    "</p-dialog>"
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "if (bezl.env.userProperties) {\n  var plant = bezl.env.userProperties.find(u => u.propertyName == \"plant\");\n  if (plant) {\n    if (plant.value.indexOf(',') != -1) {\n      bezl.vars.plant = plant.value.split(',')[0];\n      bezl.vars.plants = plant.value.split(',');\n    } else {\n      bezl.vars.plant = plant.value;\n      bezl.vars.plants = [];\n      bezl.vars.plants.push(bezl.vars.plant);\n    }\n  }\n}\n\nbezl.vars.searchEmpId = \"\";\n$(\"#empIdInput\").keyup(function(event){\n    if(event.keyCode == 13){\n        $(\"#selectBtn\").click();\n    }\n});\n\n$(\"#jopOpInput\").keyup(function(event){\n    if(event.keyCode == 13){\n        $(\"#startActBtn\").click();\n    }\n});\n\nsetTimeout(function(){ \n  document.getElementById(\"empIdInput\").focus();                   \n}, 1000);\n\n\nbezl.vars.dialogHeight = Math.floor(window.innerHeight) - 100;\nbezl.vars.dialogWidth = Math.floor(window.innerWidth*0.8);\n\n// Define PDF viewer functions\nbezl.vars.renderPage = function(num) {\n  bezl.vars.pageRendering = true;\n  // Using promise to fetch the page\n  bezl.vars.pdfDoc.getPage(num).then(function(page) {\n\n    var viewport = page.getViewport(bezl.vars.scale);\n\n    if (bezl.vars.scale == \"auto\") {\n      bezl.vars.canvas.style.width='100%';\n      bezl.vars.canvas.width  = bezl.vars.canvas.offsetWidth;\n      viewport = page.getViewport(bezl.vars.canvas.width / page.getViewport(1.0).width);\n    } else {\n      bezl.vars.canvas.style.width=null;\n    }\n\n    bezl.vars.canvas.height = viewport.height;\n    bezl.vars.canvas.width = viewport.width;\n\n    // Render PDF page into canvas context\n    var renderContext = {\n      canvasContext: bezl.vars.ctx,\n      viewport: viewport\n    };\n    var renderTask = page.render(renderContext);\n\n    // Wait for rendering to finish\n    renderTask.promise.then(function() {\n      bezl.vars.pageRendering = false;\n      if (bezl.vars.pageNumPending !== null) {\n        // New page rendering is pending\n        bezl.vars.renderPage(bezl.vars.pageNumPending);\n        bezl.vars.pageNumPending = null;\n      }\n    });\n  });                        \n}\n\nbezl.vars.queueRenderPage = function (num) {\n  if (bezl.vars.pageRendering) {\n    bezl.vars.pageNumPending = num;\n  } else {\n    bezl.vars.renderPage(num);\n  }\n};\n\nbezl.vars.onNextPage = function () {\n  if (bezl.vars.pageNum >= bezl.vars.pdfDoc.numPages) {\n    return;\n  }\n  bezl.vars.pageNum++;\n  bezl.vars.queueRenderPage(bezl.vars.pageNum);\n};\n\nbezl.vars.onPrevPage = function() {\n  if (bezl.vars.pageNum <= 1) {\n    return;\n  }\n  bezl.vars.pageNum--;\n  bezl.vars.queueRenderPage(bezl.vars.pageNum);\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "if (bezl.env.userProperties) {\r\n    var plant = bezl.env.userProperties.find(function (u) { return u.propertyName == \"plant\"; });\r\n    if (plant) {\r\n        if (plant.value.indexOf(',') != -1) {\r\n            bezl.vars.plant = plant.value.split(',')[0];\r\n            bezl.vars.plants = plant.value.split(',');\r\n        }\r\n        else {\r\n            bezl.vars.plant = plant.value;\r\n            bezl.vars.plants = [];\r\n            bezl.vars.plants.push(bezl.vars.plant);\r\n        }\r\n    }\r\n}\r\nbezl.vars.searchEmpId = \"\";\r\n$(\"#empIdInput\").keyup(function (event) {\r\n    if (event.keyCode == 13) {\r\n        $(\"#selectBtn\").click();\r\n    }\r\n});\r\n$(\"#jopOpInput\").keyup(function (event) {\r\n    if (event.keyCode == 13) {\r\n        $(\"#startActBtn\").click();\r\n    }\r\n});\r\nsetTimeout(function () {\r\n    document.getElementById(\"empIdInput\").focus();\r\n}, 1000);\r\nbezl.vars.dialogHeight = Math.floor(window.innerHeight) - 100;\r\nbezl.vars.dialogWidth = Math.floor(window.innerWidth * 0.8);\r\n// Define PDF viewer functions\r\nbezl.vars.renderPage = function (num) {\r\n    bezl.vars.pageRendering = true;\r\n    // Using promise to fetch the page\r\n    bezl.vars.pdfDoc.getPage(num).then(function (page) {\r\n        var viewport = page.getViewport(bezl.vars.scale);\r\n        if (bezl.vars.scale == \"auto\") {\r\n            bezl.vars.canvas.style.width = '100%';\r\n            bezl.vars.canvas.width = bezl.vars.canvas.offsetWidth;\r\n            viewport = page.getViewport(bezl.vars.canvas.width / page.getViewport(1.0).width);\r\n        }\r\n        else {\r\n            bezl.vars.canvas.style.width = null;\r\n        }\r\n        bezl.vars.canvas.height = viewport.height;\r\n        bezl.vars.canvas.width = viewport.width;\r\n        // Render PDF page into canvas context\r\n        var renderContext = {\r\n            canvasContext: bezl.vars.ctx,\r\n            viewport: viewport\r\n        };\r\n        var renderTask = page.render(renderContext);\r\n        // Wait for rendering to finish\r\n        renderTask.promise.then(function () {\r\n            bezl.vars.pageRendering = false;\r\n            if (bezl.vars.pageNumPending !== null) {\r\n                // New page rendering is pending\r\n                bezl.vars.renderPage(bezl.vars.pageNumPending);\r\n                bezl.vars.pageNumPending = null;\r\n            }\r\n        });\r\n    });\r\n};\r\nbezl.vars.queueRenderPage = function (num) {\r\n    if (bezl.vars.pageRendering) {\r\n        bezl.vars.pageNumPending = num;\r\n    }\r\n    else {\r\n        bezl.vars.renderPage(num);\r\n    }\r\n};\r\nbezl.vars.onNextPage = function () {\r\n    if (bezl.vars.pageNum >= bezl.vars.pdfDoc.numPages) {\r\n        return;\r\n    }\r\n    bezl.vars.pageNum++;\r\n    bezl.vars.queueRenderPage(bezl.vars.pageNum);\r\n};\r\nbezl.vars.onPrevPage = function () {\r\n    if (bezl.vars.pageNum <= 1) {\r\n        return;\r\n    }\r\n    bezl.vars.pageNum--;\r\n    bezl.vars.queueRenderPage(bezl.vars.pageNum);\r\n};\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\n\n\nif (bezl.data.getEmployees && !bezl.vars.gettingJobAttachments && !bezl.data.GetAttachment) {\n  \tbezl.vars['loading'] = false;\n  \tbezl.functions['selectEmpId'](bezl.vars['empId']);\n  \tdocument.getElementById(\"empIdInput\").focus();   \n}\n\nif (bezl.data.JobAttachments) {\n  bezl.vars.gettingJobAttachments = false;\n}\n\nif (bezl.data.GetAttachment) {\n  \n  var pdfData = atob(bezl.data.GetAttachment);\n  // Clean up data subscription as we no longer need it\n  bezl.dataService.remove('GetAttachment');\n  bezl.data.GetAttachment = null;\n\n  require.config({\n    paths: {'pdfjs-dist': 'https://npmcdn.com/pdfjs-dist'}\n  });\n  require(['pdfjs-dist/build/pdf'], function (PDFJS) {\n\n    // Using DocumentInitParameters object to load binary data.\n    var loadingTask = PDFJS.getDocument({data: pdfData});\n    loadingTask.promise.then(function(pdfDoc_) {\n\n      bezl.vars.pdfDoc = pdfDoc_;\n      bezl.vars.pageNum = 1;\n      bezl.vars.pageRendering = false;\n      bezl.vars.pageNumPending = null;\n      bezl.vars.scale = \"auto\";\n      bezl.vars.canvas = document.getElementById('viewer');\n      bezl.vars.ctx = bezl.vars.canvas.getContext('2d');\n      bezl.vars.totalPages = bezl.vars.pdfDoc.numPages;\n\n      // Initial/first page rendering\n      bezl.vars.renderPage(bezl.vars.pageNum); \n      bezl.vars.loadingAttachment = false;\n\n      // Wire up controls to functions for PDF viewer\n      if (document.getElementById('next')) {\n      \tdocument.getElementById('next').addEventListener('click', bezl.vars.onNextPage);\n      }\n      \n      if (document.getElementById('previous')) {\n      \tdocument.getElementById('previous').addEventListener('click', bezl.vars.onPrevPage);  \n      }\n      \n    }, function (reason) {\n      // PDF loading error\n      console.error(reason);\n    });\n    \n  });\n}\n\nif (bezl.data.clockIn) {\n  \tif (bezl.data.clockIn.LaborHed) {\n    \tif (bezl.data.clockIn.LaborHed.length > 0) {\n          \tbezl.vars['employee'].LaborHedSeq = bezl.data.clockIn.LaborHed[0].LaborHedSeq;\n          \tbezl.vars['employee'].LaborHedDate = bezl.data.clockIn.LaborHed[0].ClockInDate;\n          \tbezl.vars['employee'].LaborHedTime = bezl.data.clockIn.LaborHed[0].ClockInTime;\n        }\n    }\n   bezl.notificationService.showSuccess(bezl.vars.employee.Name + ' was sucessfully clocked in.');\n\tbezl.vars['pending'].clockIn = false;\n  \tbezl.dataService.remove('clockIn');\t\n  \t// Kick off a refresh\n  \tbezl.dataService.process('getEmployees');\n} \n\nif (bezl.data.clockOut) {\n  \tbezl.vars['employee'].LaborHedSeq = null;\n  \tbezl.vars['employee'].LaborHedDate = null;\n  \tbezl.vars['employee'].LaborHedTime = null;  \n  \n  \t//bezl.vars['employee'] = {};\n  \tbezl.vars['empId'] = \"\";\n  \n\tbezl.vars['pending'].clockOut = false;\n  \tbezl.notificationService.showSuccess(bezl.vars.employee.Name + ' was sucessfully clocked out.');\n  \n  \tbezl.dataService.remove('clockOut');\n  \t// Kick off a refresh\n  \tbezl.dataService.process('getEmployees');\n} \n\nif (bezl.data.getLabor) {\n  \tbezl.vars['endActivity'] = bezl.data.getLabor;\n  \tbezl.dataService.remove('getLabor');\n} \n\nif (bezl.data.startActivity) {\n\tif (bezl.data.startActivity.LaborDtl) {\n      if (bezl.data.startActivity.LaborDtl.length > 0) {\n        bezl.vars['employee'].LaborDtlSeq = bezl.data.startActivity.LaborDtl[0].LaborDtlSeq;\n        bezl.vars['employee'].JobNum = bezl.data.startActivity.LaborDtl[0].JobNum;\n        bezl.vars['employee'].AssemblySeq = bezl.data.startActivity.LaborDtl[0].AssemblySeq;\n        bezl.vars['employee'].OprSeq = bezl.data.startActivity.LaborDtl[0].OprSeq;\n        bezl.vars['employee'].ResourceID = bezl.data.startActivity.LaborDtl[0].ResourceID;\n        bezl.vars['employee'].IndirectCode = bezl.data.startActivity.LaborDtl[0].IndirectCode;\n        bezl.vars['employee'].IndirectDescription = bezl.data.startActivity.LaborDtl[0].IndirectDescription;\n      }\n    }\n  \n  \tbezl.dataService.process('getEmployees');\n  \t//bezl.vars['employee'] = {};\n  \tbezl.vars['empId'] = \"\";\n  \n \tif (bezl.vars['startActivity'].JobNum) {\n      bezl.notificationService.showSuccess('Activity: ' + bezl.vars['startActivity'].JobNum + '-' + bezl.vars['startActivity'].JobAsm + '-' \n                                           + bezl.vars['startActivity'].JobOp + ' was sucessfully started.');\n      bezl.functions['showStartActivity']();   \n    } else {\n      bezl.notificationService.showSuccess('Indirect: ' + bezl.vars['startActivity'].IndirectCode + ' was sucessfully started.');\n    }\n  \n  \tbezl.vars['pending'].startActivity = false;\n  \tbezl.dataService.remove('startActivity');\n  \t\n  \n  \t// clear forms\n  bezl.vars['startActivity'].JobNum = \"\";\n  bezl.vars['startActivity'].JobAsm = \"\";\n  bezl.vars['startActivity'].JobOp = \"\";\n} \n\nif (bezl.data.endActivity) {\n  \t// Start a refresh\n  \tbezl.dataService.process('getEmployees');\n\t//console.log(bezl.data.endActivity); \n  \t// Remove end activity\n  \tbezl.dataService.remove('endActivity');\n  \n \n \tif (bezl.vars['employee'].JobNum) {\n      bezl.notificationService.showSuccess('Activity: ' + bezl.vars['endActivity'].LaborDtl[0].JobNum + '-' + bezl.vars['endActivity'].LaborDtl[0].AssemblySeq + '-' \n                                           + bezl.vars['endActivity'].LaborDtl[0].OprSeq + ' was sucessfully ended.');\n    } else {\n      bezl.notificationService.showSuccess('Indirect: ' + bezl.vars['endActivity'].LaborDtl[0].IndirectDescription + ' was sucessfully ended.');\n    }\n  \n  \tbezl.vars.laborQty = \"\";\n  \tbezl.vars.scrapQty = \"\";\n  \t// Remove the pending flag\n  \tbezl.vars['pending'].endActivity = false;\n  \t// Show the main screen\n  \tbezl.functions['showDetail']();\n} ",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts",
        "saveAs"
      ],
      "compiled": "bezl.data = dataResp;\r\nif (bezl.data.getEmployees && !bezl.vars.gettingJobAttachments && !bezl.data.GetAttachment) {\r\n    bezl.vars['loading'] = false;\r\n    bezl.functions['selectEmpId'](bezl.vars['empId']);\r\n    document.getElementById(\"empIdInput\").focus();\r\n}\r\nif (bezl.data.JobAttachments) {\r\n    bezl.vars.gettingJobAttachments = false;\r\n}\r\nif (bezl.data.GetAttachment) {\r\n    var pdfData = atob(bezl.data.GetAttachment);\r\n    // Clean up data subscription as we no longer need it\r\n    bezl.dataService.remove('GetAttachment');\r\n    bezl.data.GetAttachment = null;\r\n    require.config({\r\n        paths: { 'pdfjs-dist': 'https://npmcdn.com/pdfjs-dist' }\r\n    });\r\n    require(['pdfjs-dist/build/pdf'], function (PDFJS) {\r\n        // Using DocumentInitParameters object to load binary data.\r\n        var loadingTask = PDFJS.getDocument({ data: pdfData });\r\n        loadingTask.promise.then(function (pdfDoc_) {\r\n            bezl.vars.pdfDoc = pdfDoc_;\r\n            bezl.vars.pageNum = 1;\r\n            bezl.vars.pageRendering = false;\r\n            bezl.vars.pageNumPending = null;\r\n            bezl.vars.scale = \"auto\";\r\n            bezl.vars.canvas = document.getElementById('viewer');\r\n            bezl.vars.ctx = bezl.vars.canvas.getContext('2d');\r\n            bezl.vars.totalPages = bezl.vars.pdfDoc.numPages;\r\n            // Initial/first page rendering\r\n            bezl.vars.renderPage(bezl.vars.pageNum);\r\n            bezl.vars.loadingAttachment = false;\r\n            // Wire up controls to functions for PDF viewer\r\n            if (document.getElementById('next')) {\r\n                document.getElementById('next').addEventListener('click', bezl.vars.onNextPage);\r\n            }\r\n            if (document.getElementById('previous')) {\r\n                document.getElementById('previous').addEventListener('click', bezl.vars.onPrevPage);\r\n            }\r\n        }, function (reason) {\r\n            // PDF loading error\r\n            console.error(reason);\r\n        });\r\n    });\r\n}\r\nif (bezl.data.clockIn) {\r\n    if (bezl.data.clockIn.LaborHed) {\r\n        if (bezl.data.clockIn.LaborHed.length > 0) {\r\n            bezl.vars['employee'].LaborHedSeq = bezl.data.clockIn.LaborHed[0].LaborHedSeq;\r\n            bezl.vars['employee'].LaborHedDate = bezl.data.clockIn.LaborHed[0].ClockInDate;\r\n            bezl.vars['employee'].LaborHedTime = bezl.data.clockIn.LaborHed[0].ClockInTime;\r\n        }\r\n    }\r\n    bezl.notificationService.showSuccess(bezl.vars.employee.Name + ' was sucessfully clocked in.');\r\n    bezl.vars['pending'].clockIn = false;\r\n    bezl.dataService.remove('clockIn');\r\n    // Kick off a refresh\r\n    bezl.dataService.process('getEmployees');\r\n}\r\nif (bezl.data.clockOut) {\r\n    bezl.vars['employee'].LaborHedSeq = null;\r\n    bezl.vars['employee'].LaborHedDate = null;\r\n    bezl.vars['employee'].LaborHedTime = null;\r\n    //bezl.vars['employee'] = {};\r\n    bezl.vars['empId'] = \"\";\r\n    bezl.vars['pending'].clockOut = false;\r\n    bezl.notificationService.showSuccess(bezl.vars.employee.Name + ' was sucessfully clocked out.');\r\n    bezl.dataService.remove('clockOut');\r\n    // Kick off a refresh\r\n    bezl.dataService.process('getEmployees');\r\n}\r\nif (bezl.data.getLabor) {\r\n    bezl.vars['endActivity'] = bezl.data.getLabor;\r\n    bezl.dataService.remove('getLabor');\r\n}\r\nif (bezl.data.startActivity) {\r\n    if (bezl.data.startActivity.LaborDtl) {\r\n        if (bezl.data.startActivity.LaborDtl.length > 0) {\r\n            bezl.vars['employee'].LaborDtlSeq = bezl.data.startActivity.LaborDtl[0].LaborDtlSeq;\r\n            bezl.vars['employee'].JobNum = bezl.data.startActivity.LaborDtl[0].JobNum;\r\n            bezl.vars['employee'].AssemblySeq = bezl.data.startActivity.LaborDtl[0].AssemblySeq;\r\n            bezl.vars['employee'].OprSeq = bezl.data.startActivity.LaborDtl[0].OprSeq;\r\n            bezl.vars['employee'].ResourceID = bezl.data.startActivity.LaborDtl[0].ResourceID;\r\n            bezl.vars['employee'].IndirectCode = bezl.data.startActivity.LaborDtl[0].IndirectCode;\r\n            bezl.vars['employee'].IndirectDescription = bezl.data.startActivity.LaborDtl[0].IndirectDescription;\r\n        }\r\n    }\r\n    bezl.dataService.process('getEmployees');\r\n    //bezl.vars['employee'] = {};\r\n    bezl.vars['empId'] = \"\";\r\n    if (bezl.vars['startActivity'].JobNum) {\r\n        bezl.notificationService.showSuccess('Activity: ' + bezl.vars['startActivity'].JobNum + '-' + bezl.vars['startActivity'].JobAsm + '-' + bezl.vars['startActivity'].JobOp + ' was sucessfully started.');\r\n        bezl.functions['showStartActivity']();\r\n    }\r\n    else {\r\n        bezl.notificationService.showSuccess('Indirect: ' + bezl.vars['startActivity'].IndirectCode + ' was sucessfully started.');\r\n    }\r\n    bezl.vars['pending'].startActivity = false;\r\n    bezl.dataService.remove('startActivity');\r\n    // clear forms\r\n    bezl.vars['startActivity'].JobNum = \"\";\r\n    bezl.vars['startActivity'].JobAsm = \"\";\r\n    bezl.vars['startActivity'].JobOp = \"\";\r\n}\r\nif (bezl.data.endActivity) {\r\n    // Start a refresh\r\n    bezl.dataService.process('getEmployees');\r\n    //console.log(bezl.data.endActivity); \r\n    // Remove end activity\r\n    bezl.dataService.remove('endActivity');\r\n    if (bezl.vars['employee'].JobNum) {\r\n        bezl.notificationService.showSuccess('Activity: ' + bezl.vars['endActivity'].LaborDtl[0].JobNum + '-' + bezl.vars['endActivity'].LaborDtl[0].AssemblySeq + '-' + bezl.vars['endActivity'].LaborDtl[0].OprSeq + ' was sucessfully ended.');\r\n    }\r\n    else {\r\n        bezl.notificationService.showSuccess('Indirect: ' + bezl.vars['endActivity'].LaborDtl[0].IndirectDescription + ' was sucessfully ended.');\r\n    }\r\n    bezl.vars.laborQty = \"\";\r\n    bezl.vars.scrapQty = \"\";\r\n    // Remove the pending flag\r\n    bezl.vars['pending'].endActivity = false;\r\n    // Show the main screen\r\n    bezl.functions['showDetail']();\r\n}\r\n"
    },
    {
      "method": "onButtonClick",
      "code": "bezl.vars['dialogVisible'] = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars['dialogVisible'] = true;\r\n"
    },
    {
      "method": "showStartActivity",
      "code": "bezl.vars['startVisible'] = !bezl.vars['startVisible'];\n\nsetTimeout(function(){ \n  document.getElementById(\"job\").focus();                   \n}, 100);",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars['startVisible'] = !bezl.vars['startVisible'];\r\nsetTimeout(function () {\r\n    document.getElementById(\"job\").focus();\r\n}, 100);\r\n"
    },
    {
      "method": "showDetail",
      "code": "bezl.vars.laborQty = \"\";\nbezl.vars.scrapQty = \"\";\n\nbezl.dataService.add('getLabor', 'brdb', 'Epicor10', 'ExecuteBOMethod',\n            {'Connection': bezl.vars['connection'], 'Company': bezl.vars['company'], 'BOName': 'Labor', 'BOMethodName': 'GetByID', \n            'Parameters': [{ 'Key': 'laborHedSeq', 'Value': bezl.vars['employee'].LaborHedSeq }]}, 0);\n\nbezl.vars['showDetail'] = !bezl.vars['showDetail'];",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.laborQty = \"\";\r\nbezl.vars.scrapQty = \"\";\r\nbezl.dataService.add('getLabor', 'brdb', 'Epicor10', 'ExecuteBOMethod', { 'Connection': bezl.vars['connection'], 'Company': bezl.vars['company'], 'BOName': 'Labor', 'BOMethodName': 'GetByID', 'Parameters': [{ 'Key': 'laborHedSeq', 'Value': bezl.vars['employee'].LaborHedSeq }] }, 0);\r\nbezl.vars['showDetail'] = !bezl.vars['showDetail'];\r\n"
    },
    {
      "method": "selectEmpId",
      "code": "if (parm != '') {\n  \t\n  \tbezl.vars['empId'] = parm;\n  \tvar employee = bezl.data.getEmployees.filter(e => e.EmpID == parm);\n  \tif (employee.length > 0) {\n      \tbezl.vars['employee'] = employee[0];\n\t\tbezl.vars['selected'] = true;\n    }\n  bezl.functions['getJobAttachments']();\n  bezl.vars.searchEmpId = \"\";\n} else {\n  \tbezl.vars['empId'] = parm; // Clear the bound variable if we are clearing\n  \tbezl.vars['employee'] = {};\n\tbezl.vars['selected'] = false;\n\tbezl.vars['pending'].startActivity = false;\n   \tbezl.vars.searchEmpId = \"\";\n    setTimeout(function(){ \n      document.getElementById(\"empIdInput\").focus();                   \n    }, 1);\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "if (parm != '') {\r\n    bezl.vars['empId'] = parm;\r\n    var employee = bezl.data.getEmployees.filter(function (e) { return e.EmpID == parm; });\r\n    if (employee.length > 0) {\r\n        bezl.vars['employee'] = employee[0];\r\n        bezl.vars['selected'] = true;\r\n    }\r\n    bezl.functions['getJobAttachments']();\r\n    bezl.vars.searchEmpId = \"\";\r\n}\r\nelse {\r\n    bezl.vars['empId'] = parm; // Clear the bound variable if we are clearing\r\n    bezl.vars['employee'] = {};\r\n    bezl.vars['selected'] = false;\r\n    bezl.vars['pending'].startActivity = false;\r\n    bezl.vars.searchEmpId = \"\";\r\n    setTimeout(function () {\r\n        document.getElementById(\"empIdInput\").focus();\r\n    }, 1);\r\n}\r\n"
    },
    {
      "method": "clockIn",
      "code": "bezl.vars['pending'].clockIn = true;\nbezl.dataService.add('clockIn','brdb','Epicor10','Labor_ClockIn', \n            {'Connection': bezl.vars['connection'], 'Company': bezl.vars['company'], 'EmployeeNum': [bezl.vars['employee'].EmpID], 'Shift': bezl.vars['employee'].Shift, 'Plant': bezl.vars['plant'] },0);",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars['pending'].clockIn = true;\r\nbezl.dataService.add('clockIn', 'brdb', 'Epicor10', 'Labor_ClockIn', { 'Connection': bezl.vars['connection'], 'Company': bezl.vars['company'], 'EmployeeNum': [bezl.vars['employee'].EmpID], 'Shift': bezl.vars['employee'].Shift, 'Plant': bezl.vars['plant'] }, 0);\r\n"
    },
    {
      "method": "clockOut",
      "code": "bezl.vars['pending'].clockOut = true;\nbezl.dataService.add('clockOut','brdb','Epicor10','Labor_ClockOut', \n            {'Connection': bezl.vars['connection'], 'Company': bezl.vars['company'], 'EmployeeNum': [bezl.vars['employee'].EmpID], 'Plant': bezl.vars['plant'] },0);",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars['pending'].clockOut = true;\r\nbezl.dataService.add('clockOut', 'brdb', 'Epicor10', 'Labor_ClockOut', { 'Connection': bezl.vars['connection'], 'Company': bezl.vars['company'], 'EmployeeNum': [bezl.vars['employee'].EmpID], 'Plant': bezl.vars['plant'] }, 0);\r\n"
    },
    {
      "method": "startActivity",
      "code": "bezl.vars['pending'].startActivity = true;\n\n// If a parameter was passed in, it is an indirect; otherwise it is a job\nif (parm) {\n  bezl.vars['startActivity'].IndirectCode = parm.IndirectCode;\n  bezl.dataService.add('startActivity', 'brdb', 'Epicor10', 'Labor_StartIndirect',\n              {'Connection': bezl.vars['connection'], \n               'Company': bezl.vars['company'], \n               'LaborHedSeq': [bezl.vars['employee'].LaborHedSeq], \n               'IndirectCode': parm.IndirectCode,\n               'WCCode': (bezl.vars['employee'].ResourceGrpID || bezl.vars['wcCode'])\n              }, 0);\n} else {\n  // Detect and split out barcode\n  if (bezl.vars['startActivity'].JobNum.startsWith('%')) {\n    var bc = bezl.vars['startActivity'].JobNum.substring(2,bezl.vars['startActivity'].JobNum.length-1).split(\"$\");\n    bezl.vars['startActivity'].JobNum = bc[0];\n    bezl.vars['startActivity'].JobAsm = bc[1];\n    bezl.vars['startActivity'].JobOp = bc[2];\n  }\n\n  bezl.dataService.add('startActivity', 'brdb', 'Epicor10', 'Labor_StartActivity',\n              {'Connection': bezl.vars['connection'], \n               'Company': bezl.vars['company'], \n               'LaborHedSeq': [bezl.vars['employee'].LaborHedSeq], \n               'JobNum': bezl.vars['startActivity'].JobNum, \n               'JobAsm': bezl.vars['startActivity'].JobAsm,\n               'JobOp': bezl.vars['startActivity'].JobOp, \n               'Setup': false,\n               'Plant': bezl.vars['plant']\n              }, 0);\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars['pending'].startActivity = true;\r\n// If a parameter was passed in, it is an indirect; otherwise it is a job\r\nif (parm) {\r\n    bezl.vars['startActivity'].IndirectCode = parm.IndirectCode;\r\n    bezl.dataService.add('startActivity', 'brdb', 'Epicor10', 'Labor_StartIndirect', { 'Connection': bezl.vars['connection'], 'Company': bezl.vars['company'], 'LaborHedSeq': [bezl.vars['employee'].LaborHedSeq], 'IndirectCode': parm.IndirectCode, 'WCCode': (bezl.vars['employee'].ResourceGrpID || bezl.vars['wcCode']) }, 0);\r\n}\r\nelse {\r\n    // Detect and split out barcode\r\n    if (bezl.vars['startActivity'].JobNum.startsWith('%')) {\r\n        var bc = bezl.vars['startActivity'].JobNum.substring(2, bezl.vars['startActivity'].JobNum.length - 1).split(\"$\");\r\n        bezl.vars['startActivity'].JobNum = bc[0];\r\n        bezl.vars['startActivity'].JobAsm = bc[1];\r\n        bezl.vars['startActivity'].JobOp = bc[2];\r\n    }\r\n    bezl.dataService.add('startActivity', 'brdb', 'Epicor10', 'Labor_StartActivity', { 'Connection': bezl.vars['connection'], 'Company': bezl.vars['company'], 'LaborHedSeq': [bezl.vars['employee'].LaborHedSeq], 'JobNum': bezl.vars['startActivity'].JobNum, 'JobAsm': bezl.vars['startActivity'].JobAsm, 'JobOp': bezl.vars['startActivity'].JobOp, 'Setup': false, 'Plant': bezl.vars['plant'] }, 0);\r\n}\r\n"
    },
    {
      "method": "endActivity",
      "code": "bezl.vars['pending'].endActivity = true;\nwhile (bezl.vars['endActivity'].LaborDtl.length > 1) {\n\t bezl.vars['endActivity'].LaborDtl.shift();\n}\n\nbezl.vars['endActivity'].LaborDtl[0].RowMod = 'A';\nbezl.vars['endActivity'].LaborDtl[0].LaborQty = bezl.vars.laborQty || 0;\nbezl.vars['endActivity'].LaborDtl[0].ScrapQty = bezl.vars.scrapQty || 0;\nbezl.vars['endActivity'].LaborDtl[0].ResourceGrpID = bezl.vars['wcCode'];\n\nbezl.dataService.add('endActivity', 'brdb', 'Epicor10', 'Labor_EndActivities',\n            {'Connection': bezl.vars['connection'], \n             'Company': bezl.vars['company'], \n             'LaborDataSet': JSON.stringify(bezl.vars['endActivity']),\n             'Plant': bezl.vars['plant']\n            }, 0);",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars['pending'].endActivity = true;\r\nwhile (bezl.vars['endActivity'].LaborDtl.length > 1) {\r\n    bezl.vars['endActivity'].LaborDtl.shift();\r\n}\r\nbezl.vars['endActivity'].LaborDtl[0].RowMod = 'A';\r\nbezl.vars['endActivity'].LaborDtl[0].LaborQty = bezl.vars.laborQty || 0;\r\nbezl.vars['endActivity'].LaborDtl[0].ScrapQty = bezl.vars.scrapQty || 0;\r\nbezl.vars['endActivity'].LaborDtl[0].ResourceGrpID = bezl.vars['wcCode'];\r\nbezl.dataService.add('endActivity', 'brdb', 'Epicor10', 'Labor_EndActivities', { 'Connection': bezl.vars['connection'], 'Company': bezl.vars['company'], 'LaborDataSet': JSON.stringify(bezl.vars['endActivity']), 'Plant': bezl.vars['plant'] }, 0);\r\n"
    },
    {
      "method": "jobKeypress",
      "code": "if (parm.key == \"Enter\" && bezl.vars['startActivity'].JobNum.endsWith(\"%\")) {\n\tbezl.functions['startActivity']();          \n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "if (parm.key == \"Enter\" && bezl.vars['startActivity'].JobNum.endsWith(\"%\")) {\r\n    bezl.functions['startActivity']();\r\n}\r\n"
    },
    {
      "method": "getJobAttachments",
      "code": "bezl.data.JobAttachments = [];\nif (bezl.vars['employee'].JobNum) {\n  bezl.vars.gettingJobAttachments = true;\n\n  bezl.dataService.add('JobAttachments','brdb','production-worker-queries','ExecuteQuery', { \n    \"QueryName\": \"labor-entry/GetJobAttachments\",\n    \"Parameters\": [\n      { \"Key\": \"JobNum\", \"Value\": bezl.vars['employee'].JobNum }\n    ] },0);\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.data.JobAttachments = [];\r\nif (bezl.vars['employee'].JobNum) {\r\n    bezl.vars.gettingJobAttachments = true;\r\n    bezl.dataService.add('JobAttachments', 'brdb', 'production-worker-queries', 'ExecuteQuery', {\r\n        \"QueryName\": \"labor-entry/GetJobAttachments\",\r\n        \"Parameters\": [\r\n            { \"Key\": \"JobNum\", \"Value\": bezl.vars['employee'].JobNum }\r\n        ]\r\n    }, 0);\r\n}\r\n"
    },
    {
      "method": "viewAttachment",
      "code": "bezl.vars.loadingAttachment = true;\nbezl.vars.viewAttachment = true;\nbezl.vars.selectedAttachmentName = parm.FileDesc;\n\nvar fileName = bezl.vars['company'] + '/JobHead/' + parm.FilePath.replace(/^.*[\\\\\\/]/, '');\n\nbezl.dataService.add('GetAttachment','brdb','FileSystem','GetFile', { 'Context': 'Attachments', 'FileName': fileName },0);\t",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.loadingAttachment = true;\r\nbezl.vars.viewAttachment = true;\r\nbezl.vars.selectedAttachmentName = parm.FileDesc;\r\nvar fileName = bezl.vars['company'] + '/JobHead/' + parm.FilePath.replace(/^.*[\\\\\\/]/, '');\r\nbezl.dataService.add('GetAttachment', 'brdb', 'FileSystem', 'GetFile', { 'Context': 'Attachments', 'FileName': fileName }, 0);\r\n"
    },
    {
      "method": "closeAttachment",
      "code": "bezl.vars.ctx.clearRect(0, 0, bezl.vars.ctx.width, bezl.vars.ctx.height);",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.ctx.clearRect(0, 0, bezl.vars.ctx.width, bezl.vars.ctx.height);\r\n"
    }
  ],
  "data": ""
}