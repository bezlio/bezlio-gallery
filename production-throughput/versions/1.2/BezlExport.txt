{
  "id": "91ce86b6-ab1c-4fa5-bcd4-27d9f142a442",
  "name": "Production Throughput",
  "template": "custom",
  "owner": "bellis@saberlogic.com",
  "shares": [],
  "vars": [],
  "dataSubscriptions": [
    {
      "connectionId": "a2d174a1-7c29-45fd-8f39-2d62f2727e8f",
      "refreshInverval": 0,
      "name": "SummaryData",
      "dataSource": "brdb",
      "plugin": "ExcelPlugin",
      "method": "GetData",
      "args": {
        "FileName": "C:\\Program Files (x86)\\Bezlio Remote Data Broker\\Data\\production.xlsx",
        "SheetName": "Production Stats",
        "FirstRowColumnNames": "Yes"
      }
    }
  ],
  "markup": [
    "<style>",
    "  /* Hover styles for interface*/",
    "  a.prodThroughput-link:hover{",
    "  \tcursor: pointer;",
    "  }",
    "  div.prodThroughput-header:hover {",
    "    background-color: #d5dbe0;",
    "  }",
    "  /* Additional styling for panels */",
    "  div.production-details-info ul li {",
    "    font-size: 11px;",
    "    text-align: right;",
    "  }",
    "</style>",
    "  <div class=\"row pull-right\" [hidden]=\"!bezl.vars.loadingSummaryData\">",
    "    <label [hidden]=\"!bezl.vars.loadingSummaryData\">Loading... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "  </div>",
    "",
    "  <div class=\"panel-group\" id=\"prodThroughputAccordion\">",
    "    <!-- Section --> ",
    "    <div class=\"panel panel-default\" *ngFor=\"let location of bezl.vars.summaryData\">",
    "      <!-- Heading -->",
    "      <div class=\"panel-heading prodThroughput-header\">",
    "        <a class=\"prodThroughput-link\" data-toggle=\"collapse\" data-parent=\"#prodThroughputAccordion\" (click)=\"location.selected = !location.selected\">",
    "          <h4 class=\"panel-title\" style=\"color: rgb(34,34,34);\">",
    "            {{location.key}}",
    "            <span style=\"color:red\" *ngIf=\"location.warningCount > 0\">",
    "              <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i> {{location.warningCount}} Warnings",
    "            </span>",
    "          </h4>",
    "        </a>\t",
    "      </div>",
    "",
    "      <!-- Details -->",
    "      <div class=\"panel-collapse collapse\" [ngClass]=\"{'in': location.selected}\">",
    "        <div class=\"panel-body\">",
    "",
    "          <div class=\"col-sm-3\" *ngFor=\"let workcenter of location.values\" [hidden]=\"!location.selected\">",
    "",
    "            <div class=\"panel\">",
    "              <div class=\"panel-body\">",
    "                <div style=\"display: inline-block;\">",
    "                  <strong>{{workcenter['Work Center']}}</strong>",
    "                </div>",
    "                <div class=\"production-details-info pull-right\" style=\"display: inline-block;\">",
    "                  <ul style=\"list-style: none; padding-left: 0;\">",
    "                    <li style=\"padding-top: 3px;\">Machines: {{workcenter['Total Machines']}}</li>",
    "                    <li style=\"padding-top: 3px;\">Throughput: {{workcenter['Current Throughput']}}</li>",
    "                    <li style=\"padding-top: 3px;\">Target: {{workcenter['Target Percentage'] | percent:'1.0-0'}}</li>",
    "                  </ul>",
    "                </div>",
    "              </div>",
    "            </div>",
    "",
    "            <div class=\"progress\">",
    "              <div class=\"progress-bar progress-bar-success progress-bar-striped\" role=\"progressbar\"",
    "                   [ngStyle]=\"{'width': workcenter['Current Percentage']*100 + '%'}\">",
    "                {{workcenter['Current Percentage'] | percent:'1.0-0'}}",
    "              </div>",
    "              <div class=\"progress-bar progress-bar-warning progress-bar-striped\" role=\"progressbar\"",
    "                   [ngStyle]=\"{'width': (workcenter['Target Percentage']-workcenter['Current Percentage'])*100 + '%'}\">",
    "              </div>",
    "            </div>",
    "",
    "          </div>",
    "        </div>",
    "      </div>  ",
    "",
    "</div> <!-- end #panelThroughputAccordion-->"
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.vars.loadingSummaryData = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.loadingSummaryData = true;\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\n\nif (bezl.data.SummaryData) {\n  bezl.vars.loadingSummaryData = false;\n\n  // Use D3 to group the data by location and store the result in a new\n  // variable named summaryData\n  bezl.vars.summaryData = d3.nest().key(function(d) { return d.Location; }).entries(bezl.data.SummaryData);\n\n  // Maintain an alert flag at the location level if any work centers are not operating\n  // at or above target percentage\n  bezl.vars.summaryData.forEach(l => {\n    l.warningCount = 0;\n    l.values.forEach(wc => {\n      if (wc['Current Percentage'] < wc['Target Percentage']) {\n        l.warningCount++;\n      }\n    });\n    l.selected = l.warningCount > 0;\n  });\n\n  // Now dispose of bezl.data.SummaryData since we no longer need it\n  bezl.data.SummaryData = null;\n  bezl.dataService.remove('SummaryData');\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts",
        "d3"
      ],
      "compiled": "bezl.data = dataResp;\r\nif (bezl.data.SummaryData) {\r\n    bezl.vars.loadingSummaryData = false;\r\n    // Use D3 to group the data by location and store the result in a new\r\n    // variable named summaryData\r\n    bezl.vars.summaryData = d3.nest().key(function (d) {\r\n        return d.Location;\r\n    }).entries(bezl.data.SummaryData);\r\n    // Maintain an alert flag at the location level if any work centers are not operating\r\n    // at or above target percentage\r\n    bezl.vars.summaryData.forEach(function (l) {\r\n        l.warningCount = 0;\r\n        l.values.forEach(function (wc) {\r\n            if (wc['Current Percentage'] < wc['Target Percentage']) {\r\n                l.warningCount++;\r\n            }\r\n        });\r\n        l.selected = l.warningCount > 0;\r\n    });\r\n    // Now dispose of bezl.data.SummaryData since we no longer need it\r\n    bezl.data.SummaryData = null;\r\n    bezl.dataService.remove('SummaryData');\r\n}\r\n"
    },
    {
      "method": "ngAfterViewInit",
      "code": "",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": ""
    }
  ],
  "data": ""
}