{
  "id": "9df2c04f-8dc4-4ead-bbb9-fa714de43d20",
  "name": "Customer Satisfaction",
  "template": "custom",
  "owner": "aellis@saberlogic.com",
  "shares": [],
  "vars": [],
  "dataSubscriptions": [
    {
      "name": "SummaryData",
      "connectionId": "b9084b1e-48b6-45e7-a5e3-d68fe28f7d70",
      "dataSource": "brdb",
      "plugin": "customer-service-queries",
      "method": "ExecuteQuery",
      "args": {
        "QueryName": "CustomerSatisfaction"
      },
      "data": null,
      "refreshInverval": 0,
      "lastRefresh": null
    }
  ],
  "markup": [
    "<div class=\"col-sm-11\">",
    "  ",
    "  <ul class=\"list-group list-unstyled\">",
    "    <li *ngFor=\"let metric of bezl.vars.scores\">",
    "      <span class=\"label label-warning pull-right\">{{metric.Score}}</span>",
    "      <p><strong>{{metric.Label}}</strong></p>",
    "      <div class=\"progress\">",
    "        <div class=\"progress-bar progress-bar-success progress-bar-striped\" role=\"progressbar\" [ngStyle]=\"{'width': metric.Percent + '%'}\">",
    "        </div>",
    "      </div>",
    "    </li>",
    "  </ul>",
    "  ",
    "</div>",
    "",
    "<div style=\"margin-top:10px\" class=\"col-sm-1\">",
    "\t<i *ngIf=\"bezl.vars.refreshing == false\" style=\"cursor: pointer; cursor: hand\" class=\"fa fa-refresh\" (click)=\"bezl.functions['refresh']()\"></i>",
    "\t<i *ngIf=\"bezl.vars.refreshing == true\" style=\"cursor: not-allowed\" class=\"fa fa-refresh fa-spin\"></i>",
    "</div>"
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.vars.refreshing = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.refreshing = true;\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\n\n// Dealing with the result data when it comes back\nif (bezl.data.SummaryData != null && bezl.data.SummaryData.length > 0) {\n\t\n\t// Split the columns up into individual rows to make them easier to iterate over\n  \tbezl.vars.scores = [];\n  \tbezl.data.SummaryData.forEach(d => {\n      for (var property in d) {\n          if (d.hasOwnProperty(property)) {\n            bezl.vars.scores.push({ Label: property, Score: d[property], Percent: (d[property] / 5) * 100 });\n          }\n      }\n    });\n  \n\tbezl.vars.refreshing = false;\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.data = dataResp;\r\n// Dealing with the result data when it comes back\r\nif (bezl.data.SummaryData != null && bezl.data.SummaryData.length > 0) {\r\n    // Split the columns up into individual rows to make them easier to iterate over\r\n    bezl.vars.scores = [];\r\n    bezl.data.SummaryData.forEach(function (d) {\r\n        for (var property in d) {\r\n            if (d.hasOwnProperty(property)) {\r\n                bezl.vars.scores.push({ Label: property, Score: d[property], Percent: (d[property] / 5) * 100 });\r\n            }\r\n        }\r\n    });\r\n    bezl.vars.refreshing = false;\r\n}\r\n"
    },
    {
      "method": "refresh",
      "code": "bezl.dataService.process('SummaryData');\nbezl.vars.refreshing = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.dataService.process('SummaryData');\r\nbezl.vars.refreshing = true;\r\n"
    }
  ],
  "data": ""
}