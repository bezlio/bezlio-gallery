{
  "id": "f6ac6268-166e-4692-92f1-9ea1096c97fd",
  "name": "Customer Satisfaction",
  "template": "custom",
  "owner": "kmansfield@saberlogic.com",
  "shares": [],
  "vars": [],
  "dataSubscriptions": [
    {
      "name": "SummaryData",
      "connectionId": "b9084b1e-48b6-45e7-a5e3-d68fe28f7d70",
      "dataSource": "brdb",
      "plugin": "ExcelPlugin",
      "method": "GetData",
      "args": {
        "FileName": "C:\\Program Files (x86)\\Bezlio Remote Data Broker\\Data\\sales.xlsx",
        "SheetName": "Customer Satisfaction",
        "FirstRowColumnNames": "Yes"
      },
      "data": null,
      "refreshInverval": 0,
      "lastRefresh": null
    }
  ],
  "markup": [
    "<style>",
    "  @media screen and (max-width: 767px) {",
    "    /* Change refresh button to full-width at smaller screen sizes*/",
    "    div.cust-satisfact-refresh, div.cust-satisfact-refresh i {",
    "      display: block;",
    "      width: 100%;",
    "    }",
    "    div.cust-satisfact-refresh {",
    "      text-align: center;",
    "    }",
    "    div.cust-satisfact {",
    "      padding-left: 0; /*Remove side padding for Bezl on mobile view*/",
    "      padding-right: 0;",
    "    }",
    "  }",
    "</style>",
    "",
    "<div class=\"col-sm-11 cust-satisfact\">",
    "  <ul class=\"list-group list-unstyled\" style=\"margin: 0; padding-bottom: 0;\">",
    "    <li *ngFor=\"let metric of bezl.vars.scores\" style=\"margin-bottom: 20px; background-color: #fff; padding: 10px 10px 5px; border: 1px solid #dadada;",
    "                                                       border-radius: 10px; box-shadow: 0px 1px 4px #d9d9d9;\">",
    "      <span class=\"label label-warning pull-right\" style=\"padding: 4px 6px; font-size: 14px;\">{{metric.Score}}</span>",
    "      <p style=\"font-size: 16px; margin-bottom: 7.5px;\"><strong>{{metric.Label}}</strong></p>",
    "      <div class=\"progress\">",
    "        <div class=\"progress-bar progress-bar-success progress-bar-striped\" role=\"progressbar\" [ngStyle]=\"{'width': metric.Percent + '%'}\">",
    "        </div>",
    "      </div>",
    "    </li>",
    "  </ul>",
    "</div>",
    "<div class=\"col-sm-1 cust-satisfact\">",
    "  <div class=\"cust-satisfact-refresh\" style=\"margin-bottom: 0; display: inline-block; background-color: #fff; border: 1px solid #dadada; box-shadow: 0px 1px 4px #d9d9d9; border-radius: 5px;\">",
    "    <i *ngIf=\"bezl.vars.refreshing == false\" style=\"cursor: pointer; cursor: hand; font-size: 20px; color: #8bc34a; padding: 10px 12px;\" class=\"fa fa-refresh\" (click)=\"bezl.functions['refresh']()\"></i>",
    "    <i *ngIf=\"bezl.vars.refreshing == true\" style=\"cursor: not-allowed; font-size: 20px; color: #8bc34a; padding: 10px 12px;\" class=\"fa fa-refresh fa-spin\"></i>",
    "  </div>",
    "</div>"
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.vars.refreshing = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.refreshing = true;\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\n\n// Dealing with the result data when it comes back\nif (bezl.data.SummaryData != null && bezl.data.SummaryData.length > 0) {\n\t\n\t// Split the columns up into individual rows to make them easier to iterate over\n  \tbezl.vars.scores = [];\n  \tbezl.data.SummaryData.forEach(d => {\n      for (var property in d) {\n          if (d.hasOwnProperty(property)) {\n            bezl.vars.scores.push({ Label: property, Score: d[property], Percent: (d[property] / 5) * 100 });\n          }\n      }\n    });\n  \n\tbezl.vars.refreshing = false;\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.data = dataResp;\r\n// Dealing with the result data when it comes back\r\nif (bezl.data.SummaryData != null && bezl.data.SummaryData.length > 0) {\r\n    // Split the columns up into individual rows to make them easier to iterate over\r\n    bezl.vars.scores = [];\r\n    bezl.data.SummaryData.forEach(function (d) {\r\n        for (var property in d) {\r\n            if (d.hasOwnProperty(property)) {\r\n                bezl.vars.scores.push({ Label: property, Score: d[property], Percent: (d[property] / 5) * 100 });\r\n            }\r\n        }\r\n    });\r\n    bezl.vars.refreshing = false;\r\n}\r\n"
    },
    {
      "method": "refresh",
      "code": "bezl.dataService.process('SummaryData');\nbezl.vars.refreshing = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.dataService.process('SummaryData');\r\nbezl.vars.refreshing = true;\r\n"
    }
  ],
  "data": ""
}