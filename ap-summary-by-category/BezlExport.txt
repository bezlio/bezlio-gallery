{
  "id": "c4be68ff-447f-47b1-9096-665823963a1d",
  "name": "AP Summary By Category",
  "template": "custom",
  "owner": "aellis@saberlogic.com",
  "shares": [],
  "vars": [],
  "dataSubscriptions": [
    {
      "name": "SummaryData",
      "connectionId": "b9084b1e-48b6-45e7-a5e3-d68fe28f7d70",
      "dataSource": "brdb",
      "plugin": "ExcelPlugin",
      "method": "GetData",
      "args": {
        "FileName": "C:\\Program Files (x86)\\Bezlio Remote Data Broker\\Data\\accounts-payable.xlsx",
        "SheetName": "Accounts Payable",
        "FirstRowColumnNames": "Yes"
      },
      "data": null,
      "refreshInverval": 0,
      "lastRefresh": null
    }
  ],
  "markup": [
    "<div class=\"panel\">",
    "  <div class=\"pad-all\">",
    "    <p class=\"text-lg text-semibold\">",
    "      <i class=\"fa fa-heartbeat\"></i> ",
    "      AP Summary By Category",
    "      <i *ngIf=\"bezl.vars.refreshing == false\" style=\"cursor: pointer; cursor: hand;\" class=\"fa fa-refresh\" (click)=\"bezl.functions['refresh']('SummaryData')\"></i>",
    "      <i *ngIf=\"bezl.vars.refreshing == true\" style=\"cursor: not-allowed;\" class=\"fa fa-refresh fa-spin\"></i>",
    "    </p>",
    "  </div>",
    "  <div class=\"pad-all\">",
    "    <div id=\"chartContainer\"></div>",
    "  </div>",
    "</div>"
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.vars.refreshing = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.refreshing = true;\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\n\n// Generic function to compare two dates\nvar dateDiff = function( date1, date2 ) {\n  //Get 1 day in milliseconds\n  var one_day=1000*60*60*24;\n\n  // Convert both dates to milliseconds\n  var date1_ms = date1.getTime();\n  var date2_ms = date2.getTime();\n\n  // Calculate the difference in milliseconds\n  var difference_ms = date2_ms - date1_ms;\n\n  // Convert back to days and return\n  return Math.round(difference_ms/one_day); \n};\n\n// Dealing with the result data when it comes back\nif (bezl.data.SummaryData != null && bezl.data.SummaryData.length > 0) {\n  \n  // Define the initial data object for our chart\n  bezl.vars.chartData = [{ label: \"Total\"\n                         , color: \"FFFFFF\"\n                         , alpha: 20\n                         , category: [\n                           {\n                             label: \"Current\"\n                             , value: 0\n                             , color: \"efa0a8\"\n                             , category: []\n                           },\n                           {\n                             label: \"1-30 Days\"\n                             , value: 0\n                             , color: \"33bdda\"\n                             , category: []\n                           },\n                           {\n                             label: \"31-60 Days\"\n                             , value: 0\n                             , color: \"6baa01\"\n                             , category: []\n                           },\n                           {\n                             label: \"61+ Days\"\n                             , value: 0\n                             , color: \"f8bd19\"\n                             , category: []\n                           },\n                         ]}];\n    \n  // Now loop through the results and build the data\n  bezl.data.SummaryData.forEach(d => {  \n    \n    // Figure out which date bucket this row belongs into based on AP due date vs today\n    var currentDate = new Date();\n    var invDate = new Date(d.DueDate);\n    var dueInDays = dateDiff(currentDate, invDate);\n    var index = 0;\n    \n    if (dueInDays <= 0) {\n      index = 0;\n    } else if (dueInDays <= 30) {\n      index = 1;\n    } else if (dueInDays <= 60) {\n      index = 2;\n    } else {\n      index = 3;\n    }\n    \n    // Store the amount due for this row into its appropriate category and subcategory.\n    bezl.vars.chartData[0].category[index].value += d.AmountDue;\n    var sub = bezl.vars.chartData[0].category[index].category.find(c => c.label == d.Category);\n    if (sub) {\n      sub.value += d.AmountDue;\n    } else {\n      bezl.vars.chartData[0].category[index].category.push(\n        {\n          label: d.Category\n          , value: d.AmountDue\n          , color: bezl.vars.chartData[0].category[index].color\n        }\n      );\n    }\n    \n  });\n  \n  \n  // Now set up the chart object how we want it\n  bezl.vars.dataSource = {\n    chart: {\n      bgcolor: 'FFFFFF',\n      pieborderthickness: 2,\n      piebordercolor: 'FFFFFF',\n      basefontsize: 9,\n      usehovercolor: 1,\n      hover: 'CCCCCC',\n      showlabels: 1,\n      showvalue: 1,\n      showvalueintooltip: 1,\n      hoverfillcolor: 'CCCCCC',\n      showborder: 0\n    },\n    category: bezl.vars.chartData\n  };\n  \n  \n  try {\n    FusionCharts.options.SVGDefinitionURL = 'absolute';\n    if  (FusionCharts('d7b7e0b1-484e-441d-bd35-3946773136dd')) {\n      FusionCharts('d7b7e0b1-484e-441d-bd35-3946773136dd').dispose();\n    } \n\n    bezl.vars.chart = new FusionCharts ({\n      type: 'multilevelpie',\n      renderAt: $(bezl.container.nativeElement).find(\"#chartContainer\")[0],\n      width: '100%',\n      height: (($(bezl.container.nativeElement)[0].clientHeight > 500) ? $(bezl.container.nativeElement)[0].clientHeight - 85 : 500),\n      id: 'd7b7e0b1-484e-441d-bd35-3946773136dd',\n      dataFormat:'json',\n      dataSource: bezl.vars.dataSource\n    }).render();\n  }\n  catch(err) {\n    console.log(err);\n  }\n  \n  \n  bezl.vars.refreshing = false;\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.data = dataResp;\r\n// Generic function to compare two dates\r\nvar dateDiff = function (date1, date2) {\r\n    //Get 1 day in milliseconds\r\n    var one_day = 1000 * 60 * 60 * 24;\r\n    // Convert both dates to milliseconds\r\n    var date1_ms = date1.getTime();\r\n    var date2_ms = date2.getTime();\r\n    // Calculate the difference in milliseconds\r\n    var difference_ms = date2_ms - date1_ms;\r\n    // Convert back to days and return\r\n    return Math.round(difference_ms / one_day);\r\n};\r\n// Dealing with the result data when it comes back\r\nif (bezl.data.SummaryData != null && bezl.data.SummaryData.length > 0) {\r\n    // Define the initial data object for our chart\r\n    bezl.vars.chartData = [{ label: \"Total\", color: \"FFFFFF\", alpha: 20, category: [\r\n        {\r\n            label: \"Current\",\r\n            value: 0,\r\n            color: \"efa0a8\",\r\n            category: []\r\n        },\r\n        {\r\n            label: \"1-30 Days\",\r\n            value: 0,\r\n            color: \"33bdda\",\r\n            category: []\r\n        },\r\n        {\r\n            label: \"31-60 Days\",\r\n            value: 0,\r\n            color: \"6baa01\",\r\n            category: []\r\n        },\r\n        {\r\n            label: \"61+ Days\",\r\n            value: 0,\r\n            color: \"f8bd19\",\r\n            category: []\r\n        },\r\n    ] }];\r\n    // Now loop through the results and build the data\r\n    bezl.data.SummaryData.forEach(function (d) {\r\n        // Figure out which date bucket this row belongs into based on AP due date vs today\r\n        var currentDate = new Date();\r\n        var invDate = new Date(d.DueDate);\r\n        var dueInDays = dateDiff(currentDate, invDate);\r\n        var index = 0;\r\n        if (dueInDays <= 0) {\r\n            index = 0;\r\n        }\r\n        else if (dueInDays <= 30) {\r\n            index = 1;\r\n        }\r\n        else if (dueInDays <= 60) {\r\n            index = 2;\r\n        }\r\n        else {\r\n            index = 3;\r\n        }\r\n        // Store the amount due for this row into its appropriate category and subcategory.\r\n        bezl.vars.chartData[0].category[index].value += d.AmountDue;\r\n        var sub = bezl.vars.chartData[0].category[index].category.find(function (c) { return c.label == d.Category; });\r\n        if (sub) {\r\n            sub.value += d.AmountDue;\r\n        }\r\n        else {\r\n            bezl.vars.chartData[0].category[index].category.push({\r\n                label: d.Category,\r\n                value: d.AmountDue,\r\n                color: bezl.vars.chartData[0].category[index].color\r\n            });\r\n        }\r\n    });\r\n    // Now set up the chart object how we want it\r\n    bezl.vars.dataSource = {\r\n        chart: {\r\n            bgcolor: 'FFFFFF',\r\n            pieborderthickness: 2,\r\n            piebordercolor: 'FFFFFF',\r\n            basefontsize: 9,\r\n            usehovercolor: 1,\r\n            hover: 'CCCCCC',\r\n            showlabels: 1,\r\n            showvalue: 1,\r\n            showvalueintooltip: 1,\r\n            hoverfillcolor: 'CCCCCC',\r\n            showborder: 0\r\n        },\r\n        category: bezl.vars.chartData\r\n    };\r\n    try {\r\n        FusionCharts.options.SVGDefinitionURL = 'absolute';\r\n        if (FusionCharts('d7b7e0b1-484e-441d-bd35-3946773136dd')) {\r\n            FusionCharts('d7b7e0b1-484e-441d-bd35-3946773136dd').dispose();\r\n        }\r\n        bezl.vars.chart = new FusionCharts({\r\n            type: 'multilevelpie',\r\n            renderAt: $(bezl.container.nativeElement).find(\"#chartContainer\")[0],\r\n            width: '100%',\r\n            height: (($(bezl.container.nativeElement)[0].clientHeight > 500) ? $(bezl.container.nativeElement)[0].clientHeight - 85 : 500),\r\n            id: 'd7b7e0b1-484e-441d-bd35-3946773136dd',\r\n            dataFormat: 'json',\r\n            dataSource: bezl.vars.dataSource\r\n        }).render();\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n    bezl.vars.refreshing = false;\r\n}\r\n"
    },
    {
      "method": "refresh",
      "code": "bezl.dataService.process('SummaryData');\nbezl.vars.refreshing = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.dataService.process('SummaryData');\r\nbezl.vars.refreshing = true;\r\n"
    }
  ],
  "data": ""
}