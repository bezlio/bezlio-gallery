{
  "id": "6d8c8e86-c42f-4182-890b-a33c0d23fc04",
  "name": "Issue Material",
  "template": "custom",
  "owner": "crogers@mickeybody.com",
  "shares": [],
  "vars": [
    {
      "name": "connection",
      "value": "\"New Pilot\""
    },
    {
      "name": "company",
      "value": "\"MTB\""
    }
  ],
  "dataSubscriptions": [
    {
      "name": "getEmployees",
      "connectionId": "332d9dea-e507-4b61-95f8-8c736d03333f",
      "dataSource": "brdb",
      "plugin": "production-worker-queries",
      "method": "ExecuteQuery",
      "args": {
        "QueryName": "/labor-entry/GetEmployees"
      },
      "data": null,
      "refreshInverval": 0,
      "lastRefresh": null
    }
  ],
  "markup": [
    "<style>",
    "  .input-group-btn > button { font-size: 12px; }",
    "  .selected { border-style: solid; border-color: black;}",
    "  ",
    "  .input-group-addon",
    "  {",
    "    padding: 6px 0px 0px 0px !important;",
    "  }",
    "  ",
    "  .image-upload > input",
    "  {",
    "      display: none;",
    "  }",
    "  ",
    "  .image-upload label",
    "  {",
    "      font-size: 28px;",
    "  }",
    "</style>",
    "",
    "<p-dialog header=\"Issue Quantity\" [(visible)]=\"bezl.vars.pickQty\" width=400 [modal]=\"false\" appendTo=\"body\">",
    "  <div class=\"row\">",
    "    <div class=\"col-sm-4\">",
    "    \t<label style=\"font-size: 24px\">Issue Qty:</label> ",
    "    </div>",
    "    <div class=\"col-sm-4\">",
    "    \t<input id=\"issueQty\" class=\"form-control\" style=\"font-size: 24px\" type=\"number\" ",
    "               [(ngModel)]=\"bezl.vars.issueQty\" ",
    "               (keyup)=\"bezl.functions['issueQtyKeypress']($event)\"",
    "               min=\"1\">   ",
    "    </div>",
    "    <div class=\"col-sm-2\">",
    "    \t<button (click)=\"bezl.vars.issueQty = bezl.vars.issueQty + 1\" class=\"btn btn-md btn-default\" style=\"font-size: 24px; width: 100%\">+</button>",
    "    </div>",
    "    <div class=\"col-sm-2\">",
    "    \t<button (click)=\"bezl.vars.issueQty = bezl.vars.issueQty - 1\" class=\"btn btn-md btn-default\" style=\"font-size: 24px; width: 100%\">-</button>",
    "    </div>",
    "  </div>",
    "  ",
    "  <div class=\"row\" style=\"margin-top: 10px\">",
    "    <div class=\"col-sm-6\">",
    "    \t<button (click)=\"bezl.functions['confirmIssue']()\" class=\"btn btn-md btn-success\" style=\"font-size: 24px; width: 100%\">Issue</button>",
    "    </div>",
    "    <div class=\"col-sm-6\">",
    "    \t<button (click)=\"bezl.vars.pickQty = false\" class=\"btn btn-md btn-danger\" style=\"font-size: 24px; width: 100%\">Cancel</button>",
    "    </div>",
    "  </div>",
    "</p-dialog>",
    "",
    "<p-dialog header=\"Issue Progress\" [(visible)]=\"bezl.vars.issuingMaterials\" width=400 [modal]=\"false\" appendTo=\"body\">",
    "  <div class=\"row\">",
    "    <div class=\"col-sm-3\">",
    "      <strong>Part</strong>",
    "    </div>",
    "    <div class=\"col-sm-3\">",
    "      <strong>Location</strong>",
    "    </div>",
    "    <div class=\"col-sm-1\">",
    "      <strong>Qty</strong>",
    "    </div>",
    "    <div class=\"col-sm-3\">",
    "      <strong>Status</strong>",
    "    </div>",
    "  </div>",
    "  ",
    "  <div *ngFor=\"let m of bezl.vars.materials\">",
    "\t<div class=\"row\" *ngFor=\"let i of m.issuePending\">",
    "      <div class=\"col-sm-3\">",
    "        {{m.partNum}}",
    "      </div>",
    "      <div class=\"col-sm-3\">",
    "        {{i.whse}} {{i.bin}}",
    "      </div>",
    "      <div class=\"col-sm-1\">",
    "        {{i.qty}}",
    "      </div>",
    "      <div class=\"col-sm-3\">",
    "        <div *ngIf=\"i.status == 'pending'\"><i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i> Pending</div>",
    "        <div *ngIf=\"i.status == 'success'\"><i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i> Success</div>",
    "        <div *ngIf=\"i.status == 'error'\">",
    "          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\" data-toggle=\"tooltip\" title=\"{{i.statusDetails}}\"></i> Error",
    "        </div>",
    "      </div>",
    "    </div>",
    "  </div>",
    "</p-dialog>",
    "",
    "<div class=\"row\">",
    "  <div class=\"col-sm-1\" style=\"margin-right: 10px; margin-top: 2px\">",
    "    <label style=\"font-size: 20px\">Employee:</label>",
    "  </div>",
    "  <div class=\"col-sm-6\">  ",
    "      <input id=\"emp\" class=\"form-control mar-rgt\" type=\"text\" ",
    "             [(ngModel)]=\"bezl.vars.emp\" ",
    "             placeholder=\"Employee ID\"",
    "             (keyup)=\"bezl.functions['empKeypress']($event)\"",
    "             [disabled]=\"bezl.vars.loadingJob || bezl.vars.loadedJob || bezl.vars.issueMaterials\"",
    "             style=\"font-size: 24px\">",
    "  </div>",
    "</div>",
    "<div class=\"row\">",
    "  <div class=\"col-sm-1\" style=\"margin-right: 10px; margin-top: 2px\">",
    "    <label style=\"font-size: 20px\">Job:</label>",
    "  </div>",
    "  <div class=\"col-sm-2\">  ",
    "      <input id=\"job\" class=\"form-control mar-rgt\" type=\"text\" ",
    "             [(ngModel)]=\"bezl.vars.job\" ",
    "             placeholder=\"Job\"",
    "             (keyup)=\"bezl.functions['jobKeypress']($event)\"",
    "             [disabled]=\"bezl.vars.loadingJob || bezl.vars.loadedJob || bezl.vars.issueMaterials || !bezl.vars.validEmployee\"",
    "             style=\"font-size: 24px\">",
    "  </div>",
    "  <div class=\"col-sm-2\">",
    "      <input id=\"asm\" class=\"form-control mar-rgt\" type=\"text\" ",
    "                     [(ngModel)]=\"bezl.vars.asm\" ",
    "                     placeholder=\"Asm\"",
    "                     (keyup)=\"bezl.functions['jobKeypress']($event)\"",
    "                     [disabled]=\"bezl.vars.loadingJob || bezl.vars.loadedJob || bezl.vars.issueMaterials || !bezl.vars.validEmployee\"",
    "                     style=\"font-size: 24px\">",
    "  </div>",
    "  <div class=\"col-sm-2\">    ",
    "      <input id=\"op\" class=\"form-control mar-rgt\" type=\"text\" ",
    "                     [(ngModel)]=\"bezl.vars.op\" ",
    "                     placeholder=\"Op\"",
    "                     (keyup)=\"bezl.functions['jobKeypress']($event)\"",
    "                     [disabled]=\"bezl.vars.loadingJob || bezl.vars.loadedJob || bezl.vars.issueMaterials || !bezl.vars.validEmployee\"",
    "                     style=\"font-size: 24px\">",
    "  </div>",
    "  <div class=\"col-sm-4\">",
    "    <button (click)=\"bezl.functions['cancelJob']()\" ",
    "            class=\"btn btn-md btn-danger mar-lft pull-right\" ",
    "            style=\"font-size: 24px\">Cancel</button>",
    "    <button (click)=\"bezl.functions['loadJob']()\" ",
    "            class=\"btn btn-md btn-primary mar-lft pull-right\" ",
    "            style=\"font-size: 24px\"",
    "            [disabled]=\"bezl.vars.loadingJob || bezl.vars.loadedJob || bezl.vars.issueMaterials || !bezl.vars.validEmployee\">Load</button>",
    "  </div>",
    "</div>",
    "",
    "<div class=\"row\" [hidden]=\"bezl.vars.loadedJob\">",
    "    <label [hidden]=\"!bezl.vars.loadingJob\">Loading Job Materials... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "</div>",
    "",
    "<div class=\"row\" [hidden]=\"!bezl.vars.issueMaterials\">",
    "    <label>Issuing Materials... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "</div>",
    "",
    "<div class=\"row\" [hidden]=\"!bezl.vars.loadedJob || bezl.vars.issueMaterials\" style=\"margin-bottom:10px; margin-top: 2px\">",
    "  <div class=\"col-sm-1\" style=\"margin-right: 10px\">",
    "    <label style=\"font-size: 20px\">Material:</label>",
    "  </div>",
    "  <div class=\"col-sm-6\">   ",
    "      <input id=\"material\" class=\"form-control mar-rgt\" type=\"text\" ",
    "                     [(ngModel)]=\"bezl.vars.material\" ",
    "                     placeholder=\"Part / Seq\"",
    "                     (keyup)=\"bezl.functions['materialKeypress']($event)\"",
    "                     style=\"font-size: 24px\">",
    "  </div>",
    "  <div class=\"col-sm-4\">",
    "    <div [hidden]=\"!bezl.vars.loadedJob || bezl.vars.issueMaterials\">",
    "      <button style=\"font-size: 24px\" (click)=\"bezl.functions['issueMaterials']()\" class=\"btn btn-md btn-primary pull-right\">Issue Materials</button>",
    "    </div>",
    "  </div>",
    "</div>",
    "",
    "<div class=\"panel panel-default\" [hidden]=\"!bezl.vars.loadedJob || bezl.vars.issueMaterials\">",
    "  <div class=\"panel-heading\">",
    "    <h3 class=\"panel-title\">Job Materials</h3>",
    "  </div>",
    "  <div class=\"panel-body\">",
    "    <div class=\"row\">",
    "      ",
    "      <div class=\"col-sm-3 panel\" ",
    "           *ngFor=\"let m of bezl.vars.materials; let idx = index;\"",
    "           style=\"border-radius: 5px; padding-right: 0px; padding-left: 0px; min-height: 200px\"",
    "           (click)=\"bezl.functions['selectMaterial'](m)\"",
    "           [ngClass]=\"{'selected': bezl.vars.materials[idx].selected}\"",
    "           [ngStyle]=\"{'background-color': (bezl.vars.materials[idx].success ? 'LightGreen' : ",
    "                      \t\t\t\t\t   (bezl.vars.materials[idx].error ? 'Red' : '')) }\"> ",
    "        ",
    "        <div class=\"row\" style=\"text-align: center; height: 25px;\">",
    "            <strong>Part # {{m.partNum}}</strong>",
    "        </div>",
    "        ",
    "        <div class=\"row\">",
    "          <div class=\"col-sm-11\" style=\"margin-left:5px\">{{m.ref}}</div>",
    "        </div>",
    "        ",
    "        <div class=\"row\">",
    "          <div class=\"col-sm-11\" style=\"margin-left:5px\">{{m.description}}</div>",
    "        </div>",
    "        ",
    "        <div class=\"row\">",
    "          <div class=\"col-sm-11\" style=\"margin-left:5px\">{{m.issuedQty}} / {{m.requiredQty}} {{m.uom}}</div>",
    "        </div>",
    "        ",
    "        <div class=\"row\" *ngFor=\"let i of m.issuePending\" (click)=\"bezl.functions['removeInvAllocation']({material: m, inventory: i})\">",
    "          <div class=\"col-sm-2\">",
    "           <button style=\"margin-left:5px\" class=\"btn btn-md btn-danger\">X</button>",
    "          </div>",
    "          <div class=\"col-sm-9\">        ",
    "            <label class=\"form-control\"",
    "           \t\tstyle=\"margin-left:5px\">{{i.whse}} / {{i.bin}}: {{i.qty}}</label>",
    "          </div>",
    "        </div>",
    "        ",
    "      </div>",
    "      ",
    "    </div>",
    "  </div>",
    "</div>",
    "",
    "<div id=\"inventory\" class=\"panel panel-default\" [hidden]=\"!bezl.vars.loadedJob || bezl.vars.issueMaterials\">",
    "  <div class=\"panel-heading\">",
    "    <h3 class=\"panel-title\">Inventory Location</h3>",
    "  </div>",
    "  <div class=\"panel-body\">",
    "    <div class=\"row\" [hidden]=\"!bezl.vars.loadingInventory\">",
    "        <label [hidden]=\"!bezl.vars.loadingInventory\">Loading Inventory... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "    </div>",
    "    <div class=\"row\" *ngIf=\"bezl.vars.selectedMaterial\">",
    "      <div *ngFor=\"let i of bezl.vars.selectedMaterialInventory\" class=\"col-sm-3 panel\"",
    "           style=\"border-radius: 5px; padding-right: 0px; padding-left: 0px\"",
    "           (click)=\"bezl.functions['selectInventory'](i)\">",
    "        ",
    "        <div class=\"row\" style=\"text-align: center; height: 25px;\">",
    "          <strong>{{i.warehouse}} / {{i.bin}}</strong>",
    "        </div>",
    "        ",
    "        <div class=\"row\">",
    "          <div class=\"col-sm-11\" style=\"margin-left:5px\">",
    "            {{i.qty | number}} {{i.uom}} Avail",
    "          </div>",
    "        </div>",
    "                ",
    "      </div>",
    "    </div>",
    "  </div>",
    "</div>"
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.vars.selectedMaterial = {};\nbezl.vars.materials = [];\nbezl.vars.selectedMaterialInventory = [];\nbezl.vars.filled = false;\nbezl.vars.validEmployee = false;\n\nsetTimeout(function(){ \n  document.getElementById(\"emp\").focus();                   \n}, 1);\n\n\nwindow.onkeydown = function(e) {\n  \tif (e.key == \"Escape\") {\n\t\tbezl.functions['cancelJob']();      \n    }\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts",
        "Quagga"
      ],
      "compiled": "bezl.vars.selectedMaterial = {};\r\nbezl.vars.materials = [];\r\nbezl.vars.selectedMaterialInventory = [];\r\nbezl.vars.filled = false;\r\nbezl.vars.validEmployee = false;\r\nsetTimeout(function () {\r\n    document.getElementById(\"emp\").focus();\r\n}, 1);\r\nwindow.onkeydown = function (e) {\r\n    if (e.key == \"Escape\") {\r\n        bezl.functions['cancelJob']();\r\n    }\r\n};\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\n\nif (bezl.data.Job) {\n  bezl.vars.loadingJob = false;\n  \n  bezl.vars.materials = [];\n  bezl.vars.loadedJob = true;\n  bezl.data.Job.forEach(mtl => {\n    bezl.vars.materials.push({ id: mtl.ID\n                              , job: mtl.JobNum\n                              , asm: mtl.AssemblySeq\n                              , mtlSeq: mtl.MtlSeq\n                              , partNum: mtl.PartNum\n                              , description: mtl.Description\n                              , ref: 'Asm: ' + mtl.AssemblySeq + ' Op: ' + mtl.RelatedOperation + ' Mtl: ' + mtl.MtlSeq\n                              , requiredQty: mtl.RequiredQty\n                              , issuedQty: mtl.IssuedQty\n                              , due: mtl.RequiredQty - mtl.IssuedQty\n                              , uom: mtl.IUM\n                              , validated: 0\n                              , success: (mtl.RequiredQty - mtl.IssuedQty <= 0 ? true : false)\n                              , warning: false\n                              , error: false\n                              , selected: ((bezl.vars.materials.length == 0) ? true : false)\n                              , issuePending: []\n                              , plant: mtl.Plant\n                             });      \n  });\n\n  setTimeout(function(){ \n    document.getElementById(\"material\").focus();                   \n  }, 1);\n    \n  \n  bezl.data.Job = null;\n  bezl.dataService.remove('Job');\n  \n  // Auto-select the first material that has a quantity due\n  var firstPendingMtl = bezl.vars.materials.find(m => m.due > 0);\n  if (firstPendingMtl) {\n    bezl.functions['selectMaterial'](firstPendingMtl);\n  }\n}\n\nif (bezl.data.Inventory) {\n  bezl.vars.selectedMaterialInventory = [];\n  bezl.data.Inventory.forEach(inv => {\n    bezl.vars.selectedMaterialInventory.push({ warehouse: inv.WarehouseCode\n                                              , bin: inv.BinNum\n                                              , qty: inv.OnhandQty \n                                              , uom: inv.UOM\n                                             });    \n  });\n  \n  bezl.vars.loadingInventory = false;\n  bezl.data.Inventory = null;\n  bezl.dataService.remove('Inventory');\n}\n\nif (bezl.data.IssueMaterials) {\n  var errorCount = 0;\n  bezl.data.IssueMaterials.forEach(i => {\n\tvar m = bezl.vars.materials.find(m => m.partNum == i.PartNum && (m.mtlSeq == i.MtlSeq || !m.mtlSeq));\n    if (m) {\n     \tvar ip = m.issuePending.find(p => p.whse == i.FromWarehouseCode && p.bin == i.FromBinNum);\n      \tif (ip) {\n        \tif (i.Status == \"Success\") {\n            \tip.status = \"success\"; \n            } else {\n              \terrorCount++;\n            \tip.status = \"error\";\n              \tip.statusDetails = i.Details;\n            }\n        }\n    }\n  });\n  \n  if (errorCount == 0) {\n    bezl.vars.issuingMaterials = false;\n    bezl.notificationService.showSuccess('All issues completed successfully');\n    bezl.functions['cancelJob']();\n  }\n  \n  bezl.data.IssueMaterials = null;\n  bezl.dataService.remove('IssueMaterials');\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.data = dataResp;\r\nif (bezl.data.Job) {\r\n    bezl.vars.loadingJob = false;\r\n    bezl.vars.materials = [];\r\n    bezl.vars.loadedJob = true;\r\n    bezl.data.Job.forEach(function (mtl) {\r\n        bezl.vars.materials.push({ id: mtl.ID, job: mtl.JobNum, asm: mtl.AssemblySeq, mtlSeq: mtl.MtlSeq, partNum: mtl.PartNum, description: mtl.Description, ref: 'Asm: ' + mtl.AssemblySeq + ' Op: ' + mtl.RelatedOperation + ' Mtl: ' + mtl.MtlSeq, requiredQty: mtl.RequiredQty, issuedQty: mtl.IssuedQty, due: mtl.RequiredQty - mtl.IssuedQty, uom: mtl.IUM, validated: 0, success: (mtl.RequiredQty - mtl.IssuedQty <= 0 ? true : false), warning: false, error: false, selected: ((bezl.vars.materials.length == 0) ? true : false), issuePending: [], plant: mtl.Plant });\r\n    });\r\n    setTimeout(function () {\r\n        document.getElementById(\"material\").focus();\r\n    }, 1);\r\n    bezl.data.Job = null;\r\n    bezl.dataService.remove('Job');\r\n    // Auto-select the first material that has a quantity due\r\n    var firstPendingMtl = bezl.vars.materials.find(function (m) { return m.due > 0; });\r\n    if (firstPendingMtl) {\r\n        bezl.functions['selectMaterial'](firstPendingMtl);\r\n    }\r\n}\r\nif (bezl.data.Inventory) {\r\n    bezl.vars.selectedMaterialInventory = [];\r\n    bezl.data.Inventory.forEach(function (inv) {\r\n        bezl.vars.selectedMaterialInventory.push({ warehouse: inv.WarehouseCode, bin: inv.BinNum, qty: inv.OnhandQty, uom: inv.UOM });\r\n    });\r\n    bezl.vars.loadingInventory = false;\r\n    bezl.data.Inventory = null;\r\n    bezl.dataService.remove('Inventory');\r\n}\r\nif (bezl.data.IssueMaterials) {\r\n    var errorCount = 0;\r\n    bezl.data.IssueMaterials.forEach(function (i) {\r\n        var m = bezl.vars.materials.find(function (m) { return m.partNum == i.PartNum && (m.mtlSeq == i.MtlSeq || !m.mtlSeq); });\r\n        if (m) {\r\n            var ip = m.issuePending.find(function (p) { return p.whse == i.FromWarehouseCode && p.bin == i.FromBinNum; });\r\n            if (ip) {\r\n                if (i.Status == \"Success\") {\r\n                    ip.status = \"success\";\r\n                }\r\n                else {\r\n                    errorCount++;\r\n                    ip.status = \"error\";\r\n                    ip.statusDetails = i.Details;\r\n                }\r\n            }\r\n        }\r\n    });\r\n    if (errorCount == 0) {\r\n        bezl.vars.issuingMaterials = false;\r\n        bezl.notificationService.showSuccess('All issues completed successfully');\r\n        bezl.functions['cancelJob']();\r\n    }\r\n    bezl.data.IssueMaterials = null;\r\n    bezl.dataService.remove('IssueMaterials');\r\n}\r\n"
    },
    {
      "method": "selectMaterial",
      "code": "bezl.vars.selectedMaterialInventory = [];\nbezl.vars.loadingInventory = true;\nbezl.vars.materials.forEach(p => {p.selected = false;});\nparm.selected=true;\nbezl.vars.selectedMaterial = bezl.vars.materials.find(p => p.selected == true);\nbezl.dataService.add('Inventory','brdb','production-worker-queries','ExecuteQuery', { \n  \"QueryName\": \"GetInventory\",\n  \"Parameters\": [\n    { \"Key\": \"PartNum\", \"Value\": parm.partNum },\n    { \"Key\": \"Plant\", \"Value\": parm.plant }\n  ]\n},0);\n\ndocument.getElementById('inventory').scrollIntoView();",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.selectedMaterialInventory = [];\r\nbezl.vars.loadingInventory = true;\r\nbezl.vars.materials.forEach(function (p) {\r\n    p.selected = false;\r\n});\r\nparm.selected = true;\r\nbezl.vars.selectedMaterial = bezl.vars.materials.find(function (p) { return p.selected == true; });\r\nbezl.dataService.add('Inventory', 'brdb', 'production-worker-queries', 'ExecuteQuery', {\r\n    \"QueryName\": \"GetInventory\",\r\n    \"Parameters\": [\r\n        { \"Key\": \"PartNum\", \"Value\": parm.partNum },\r\n        { \"Key\": \"Plant\", \"Value\": parm.plant }\r\n    ]\r\n}, 0);\r\ndocument.getElementById('inventory').scrollIntoView();\r\n"
    },
    {
      "method": "loadJob",
      "code": "if(bezl.vars.job == '' || bezl.vars.job == null) {\n  bezl.notificationService.showCriticalError('Please enter a valid job number');\n} else {\n  // Detect and split out barcode\n  if (bezl.vars.job.startsWith('%')) {\n  \tvar bc = bezl.vars.job.substring(2,bezl.vars.job.length-1).split(\"$\");\n  \tbezl.vars.job = bc[0];\n  \tbezl.vars.asm = bc[1];\n  \tbezl.vars.op = bc[2];\n  }\n  \n  bezl.dataService.add('Job','brdb','production-worker-queries','ExecuteQuery', { \n      \"QueryName\": \"GetJob\",\n      \"Parameters\": [\n          { \"Key\": \"Job\", \"Value\": bezl.vars.job },\n       \t  { \"Key\": \"Asm\", \"Value\": bezl.vars.asm || '' },\n          { \"Key\": \"Op\", \"Value\": bezl.vars.op || '' },\n      ]\n  },0);\n\n  bezl.vars.loadingJob = true;\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "if (bezl.vars.job == '' || bezl.vars.job == null) {\r\n    bezl.notificationService.showCriticalError('Please enter a valid job number');\r\n}\r\nelse {\r\n    // Detect and split out barcode\r\n    if (bezl.vars.job.startsWith('%')) {\r\n        var bc = bezl.vars.job.substring(2, bezl.vars.job.length - 1).split(\"$\");\r\n        bezl.vars.job = bc[0];\r\n        bezl.vars.asm = bc[1];\r\n        bezl.vars.op = bc[2];\r\n    }\r\n    bezl.dataService.add('Job', 'brdb', 'production-worker-queries', 'ExecuteQuery', {\r\n        \"QueryName\": \"GetJob\",\r\n        \"Parameters\": [\r\n            { \"Key\": \"Job\", \"Value\": bezl.vars.job },\r\n            { \"Key\": \"Asm\", \"Value\": bezl.vars.asm || '' },\r\n            { \"Key\": \"Op\", \"Value\": bezl.vars.op || '' },\r\n        ]\r\n    }, 0);\r\n    bezl.vars.loadingJob = true;\r\n}\r\n"
    },
    {
      "method": "confirmIssue",
      "code": "console.log(bezl.vars.issueQty);\n\nbezl.vars.selectedMaterial.issuedQty += bezl.vars.issueQty;\nbezl.vars.selectedMaterial.issuePending.push( { id: bezl.vars.id\n                                               , whse: bezl.vars.issueWhse\n                                               , bin: bezl.vars.issueBin\n                                               , qty: bezl.vars.issueQty\n                                               , uom: bezl.vars.uom\n                                               , status: 'pending' });\nbezl.vars.pickQty = false;\n\nif (bezl.vars.selectedMaterial.issuedQty == bezl.vars.selectedMaterial.requiredQty) {\n    bezl.vars.selectedMaterial.success = true;\n    bezl.vars.selectedMaterial.warning = false;\n    bezl.vars.selectedMaterial.error = false;\n} else if (bezl.vars.selectedMaterial.issuedQty > bezl.vars.selectedMaterial.requiredQty) {\n    bezl.vars.selectedMaterial.success = false;\n    bezl.vars.selectedMaterial.warning = false;\n    bezl.vars.selectedMaterial.error = true;\n}\n\nsetTimeout(function(){ \n  document.getElementById(\"material\").focus();                   \n}, 1);\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "console.log(bezl.vars.issueQty);\r\nbezl.vars.selectedMaterial.issuedQty += bezl.vars.issueQty;\r\nbezl.vars.selectedMaterial.issuePending.push({ id: bezl.vars.id, whse: bezl.vars.issueWhse, bin: bezl.vars.issueBin, qty: bezl.vars.issueQty, uom: bezl.vars.uom, status: 'pending' });\r\nbezl.vars.pickQty = false;\r\nif (bezl.vars.selectedMaterial.issuedQty == bezl.vars.selectedMaterial.requiredQty) {\r\n    bezl.vars.selectedMaterial.success = true;\r\n    bezl.vars.selectedMaterial.warning = false;\r\n    bezl.vars.selectedMaterial.error = false;\r\n}\r\nelse if (bezl.vars.selectedMaterial.issuedQty > bezl.vars.selectedMaterial.requiredQty) {\r\n    bezl.vars.selectedMaterial.success = false;\r\n    bezl.vars.selectedMaterial.warning = false;\r\n    bezl.vars.selectedMaterial.error = true;\r\n}\r\nsetTimeout(function () {\r\n    document.getElementById(\"material\").focus();\r\n}, 1);\r\n"
    },
    {
      "method": "cancelJob",
      "code": "bezl.vars.materials = []\nbezl.vars.job = '';\nbezl.vars.asm = '';\nbezl.vars.op = '';\nbezl.vars.loadingJob = false;\nbezl.vars.loadedJob = false;\nbezl.vars.selectedMaterial = {};\nbezl.vars.validEmployee = false;\nbezl.vars.emp = '';\n\nsetTimeout(function(){ \n  document.getElementById(\"emp\").focus();                   \n}, 100);",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.materials = [];\r\nbezl.vars.job = '';\r\nbezl.vars.asm = '';\r\nbezl.vars.op = '';\r\nbezl.vars.loadingJob = false;\r\nbezl.vars.loadedJob = false;\r\nbezl.vars.selectedMaterial = {};\r\nbezl.vars.validEmployee = false;\r\nbezl.vars.emp = '';\r\nsetTimeout(function () {\r\n    document.getElementById(\"emp\").focus();\r\n}, 100);\r\n"
    },
    {
      "method": "jobKeypress",
      "code": "if (parm.key == \"Enter\") {\n\tbezl.functions['loadJob']();                  \n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "if (parm.key == \"Enter\") {\r\n    bezl.functions['loadJob']();\r\n}\r\n"
    },
    {
      "method": "materialKeypress",
      "code": "if (parm.key == \"Enter\") {\n\tvar mtl = bezl.vars.materials.find(m => m.partNum == bezl.vars.material || m.mtlSeq == bezl.vars.material);\n  \tif (mtl) {\n\t\tbezl.functions['selectMaterial'](mtl);      \n    } else {\n      bezl.vars.materials.push( { partNum: bezl.vars.material\n                                 , job: bezl.vars.job\n                                 , asm: bezl.vars.asm || 0\n                                 , description: 'Added Part'\n                                 , issuedQty: 0\n                                 , requiredQty: 0 \n                                 , issuePending: []\n                                } );\n      var mtl = bezl.vars.materials.find(m => m.partNum == bezl.vars.material || m.mtlSeq == bezl.vars.material);\n      bezl.functions['selectMaterial'](mtl); \n    }\n      \n  \tbezl.vars.material = '';\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "if (parm.key == \"Enter\") {\r\n    var mtl = bezl.vars.materials.find(function (m) { return m.partNum == bezl.vars.material || m.mtlSeq == bezl.vars.material; });\r\n    if (mtl) {\r\n        bezl.functions['selectMaterial'](mtl);\r\n    }\r\n    else {\r\n        bezl.vars.materials.push({ partNum: bezl.vars.material, job: bezl.vars.job, asm: bezl.vars.asm || 0, description: 'Added Part', issuedQty: 0, requiredQty: 0, issuePending: [] });\r\n        var mtl = bezl.vars.materials.find(function (m) { return m.partNum == bezl.vars.material || m.mtlSeq == bezl.vars.material; });\r\n        bezl.functions['selectMaterial'](mtl);\r\n    }\r\n    bezl.vars.material = '';\r\n}\r\n"
    },
    {
      "method": "issueMaterials",
      "code": "bezl.vars.issuingMaterials = true;\n\nvar transactions = [];\nvar plant = '';\nbezl.vars.materials.forEach(m => {\n  m.issuePending.forEach(i => {\n    plant = m.plant;\n\ttransactions.push({\n      JobNum\t\t\t: \tm.job,\n      AssemblySeq\t\t:\tm.asm,\n      MtlSeq\t\t\t:\tm.mtlSeq,\n      TranType\t\t\t:\t'STK-MTL',\n      PartNum\t\t\t:\tm.partNum,\n      TranQty\t\t\t:\ti.qty,\n      UOM\t\t\t\t:\ti.uom,\n      FromWarehouseCode\t:\ti.whse,\n      FromBinNum\t\t:\ti.bin,\n      ToWarehouseCode\t:\ti.whse,\n      ToBinNum\t\t\t:\ti.bin,\n      TranReference\t\t:\t'Bezlio: ' + bezl.vars.emp\n    });\n  });\n  \n});\n\nbezl.dataService.add(\n  'IssueMaterials'\n  , 'brdb'\n  , 'Epicor10'\n  , 'Materials_IssueReturnToJob'\n  ,\n  {\n    'Connection'\t: bezl.vars['connection']\n    , 'Company'\t\t: bezl.vars['company']\n    , 'AddMaterials': true\n    , 'Transactions': transactions\n    , 'Plant'\t\t: plant\n  }\n  , 0);",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.issuingMaterials = true;\r\nvar transactions = [];\r\nvar plant = '';\r\nbezl.vars.materials.forEach(function (m) {\r\n    m.issuePending.forEach(function (i) {\r\n        plant = m.plant;\r\n        transactions.push({\r\n            JobNum: m.job,\r\n            AssemblySeq: m.asm,\r\n            MtlSeq: m.mtlSeq,\r\n            TranType: 'STK-MTL',\r\n            PartNum: m.partNum,\r\n            TranQty: i.qty,\r\n            UOM: i.uom,\r\n            FromWarehouseCode: i.whse,\r\n            FromBinNum: i.bin,\r\n            ToWarehouseCode: i.whse,\r\n            ToBinNum: i.bin,\r\n            TranReference: 'Bezlio: ' + bezl.vars.emp\r\n        });\r\n    });\r\n});\r\nbezl.dataService.add('IssueMaterials', 'brdb', 'Epicor10', 'Materials_IssueReturnToJob', {\r\n    'Connection': bezl.vars['connection'],\r\n    'Company': bezl.vars['company'],\r\n    'AddMaterials': true,\r\n    'Transactions': transactions,\r\n    'Plant': plant\r\n}, 0);\r\n"
    },
    {
      "method": "selectInventory",
      "code": "bezl.vars.id = Math.floor(Math.random() * 1000);\nbezl.vars.issueQty = bezl.vars.selectedMaterial.requiredQty - bezl.vars.selectedMaterial.issuedQty; \n\nif (bezl.vars.issueQty <= 0) {\n bezl.vars.issueQty = 1; \n}\n\nbezl.vars.issueWhse = parm.warehouse; \nbezl.vars.issueBin = parm.bin; \nbezl.vars.pickQty = true;\nbezl.vars.uom = parm.uom;\n\nsetTimeout(function(){ \n  document.getElementById(\"issueQty\").focus();                   \n}, 10);\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.id = Math.floor(Math.random() * 1000);\r\nbezl.vars.issueQty = bezl.vars.selectedMaterial.requiredQty - bezl.vars.selectedMaterial.issuedQty;\r\nif (bezl.vars.issueQty <= 0) {\r\n    bezl.vars.issueQty = 1;\r\n}\r\nbezl.vars.issueWhse = parm.warehouse;\r\nbezl.vars.issueBin = parm.bin;\r\nbezl.vars.pickQty = true;\r\nbezl.vars.uom = parm.uom;\r\nsetTimeout(function () {\r\n    document.getElementById(\"issueQty\").focus();\r\n}, 10);\r\n"
    },
    {
      "method": "issueQtyKeypress",
      "code": "if (parm.key == \"Enter\") {\n\tbezl.functions['confirmIssue']();\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "if (parm.key == \"Enter\") {\r\n    bezl.functions['confirmIssue']();\r\n}\r\n"
    },
    {
      "method": "removeInvAllocation",
      "code": "parm.material.issuedQty = parm.material.issuedQty - parm.inventory.qty;\nparm.material.issuePending.pop(parm.inventory);\n\nif (parm.material.issuedQty == parm.material.requiredQty) {\n    parm.material.success = true;\n    parm.material.warning = false;\n    parm.material.error = false;\n} else if (parm.material.issuedQty > parm.material.requiredQty) {\n    parm.material.success = false;\n    parm.material.warning = false;\n    parm.material.error = true;\n} else if (parm.material.issuedQty < parm.material.requiredQty) {\n    parm.material.success = false;\n    parm.material.warning = false;\n    parm.material.error = false;\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "parm.material.issuedQty = parm.material.issuedQty - parm.inventory.qty;\r\nparm.material.issuePending.pop(parm.inventory);\r\nif (parm.material.issuedQty == parm.material.requiredQty) {\r\n    parm.material.success = true;\r\n    parm.material.warning = false;\r\n    parm.material.error = false;\r\n}\r\nelse if (parm.material.issuedQty > parm.material.requiredQty) {\r\n    parm.material.success = false;\r\n    parm.material.warning = false;\r\n    parm.material.error = true;\r\n}\r\nelse if (parm.material.issuedQty < parm.material.requiredQty) {\r\n    parm.material.success = false;\r\n    parm.material.warning = false;\r\n    parm.material.error = false;\r\n}\r\n"
    },
    {
      "method": "empKeypress",
      "code": "if (parm.key == \"Enter\") {\n  \tbezl.vars.validEmployee = false;\n  \n\tvar employee = bezl.data.getEmployees.filter(e => e.EmpID == bezl.vars.emp);      \n  \tif (employee.length > 0) {\n      bezl.vars.validEmployee = true;\n      setTimeout(function(){ \n        document.getElementById(\"job\").focus();                   \n      }, 1);\n      \n    } else {\n      bezl.notificationService.showError('Invalid employee');\n      bezl.vars.emp = '';\n    }\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "if (parm.key == \"Enter\") {\r\n    bezl.vars.validEmployee = false;\r\n    var employee = bezl.data.getEmployees.filter(function (e) { return e.EmpID == bezl.vars.emp; });\r\n    if (employee.length > 0) {\r\n        bezl.vars.validEmployee = true;\r\n        setTimeout(function () {\r\n            document.getElementById(\"job\").focus();\r\n        }, 1);\r\n    }\r\n    else {\r\n        bezl.notificationService.showError('Invalid employee');\r\n        bezl.vars.emp = '';\r\n    }\r\n}\r\n"
    },
    {
      "method": "ngAfterViewInit",
      "code": "",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": ""
    }
  ],
  "data": ""
}