{
  "id": "3ddac2ba-b6a4-4a7d-86a1-ff3ea0d93232",
  "name": "Production Scheduling Board",
  "template": "custom",
  "owner": "aellis@saberlogic.com",
  "shares": [],
  "vars": [],
  "dataSubscriptions": [
    {
      "name": "JobSchedule",
      "connectionId": "b9084b1e-48b6-45e7-a5e3-d68fe28f7d70",
      "dataSource": "brdb",
      "plugin": "ExcelPlugin",
      "method": "GetData",
      "args": {
        "FileName": "C:\\Program Files (x86)\\Bezlio Remote Data Broker\\Data\\production.xlsx",
        "SheetName": "Job Schedule",
        "FirstRowColumnNames": "Yes"
      },
      "data": null,
      "refreshInverval": 0,
      "lastRefresh": null
    },
    {
      "name": "Resources",
      "connectionId": "b9084b1e-48b6-45e7-a5e3-d68fe28f7d70",
      "dataSource": "brdb",
      "plugin": "ExcelPlugin",
      "method": "GetData",
      "args": {
        "FileName": "C:\\Program Files (x86)\\Bezlio Remote Data Broker\\Data\\production.xlsx",
        "SheetName": "Resources",
        "FirstRowColumnNames": "Yes"
      },
      "data": null,
      "refreshInverval": 0,
      "lastRefresh": null
    }
  ],
  "markup": [
    "<!-- CSS files -->",
    "<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/dragula/3.7.2/dragula.min.css\"> ",
    "",
    "<style> ",
    "  .panel-hover:hover {",
    "    background: #e0e0e0;",
    "    cursor:pointer;",
    "  }",
    "</style>",
    "",
    "<div class=\"row\">",
    "\t<label class=\"pull-right\" [hidden]=\"!bezl.vars.loading\">Loading... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "\t<label class=\"pull-right\" [hidden]=\"!bezl.vars.saving\">Saving... <i class=\"fa fa-spinner fa-spin\" style=\"font-size:24px\"></i></label>",
    "</div>",
    "",
    "<div class=\"row\">",
    "  <div class=\"col-sm-3\">",
    "    <div class=\"panel panel-default\" style=\"overflow:vertical\">",
    "      <div class=\"panel-heading\">",
    "        <h3 class=\"panel-title\">For Assignment</h3>",
    "      </div>",
    "",
    "      <button type=\"button\" class=\"btn btn-default\"  ",
    "              [disabled]=\"bezl.vars.saving ||bezl.vars.loading\" ",
    "              (click)=\"bezl.vars.workCenterExpand = !bezl.vars.workCenterExpand\" style=\"margin-left: 15px; width: 90%\">",
    "        <i class=\"fa fa-filter\" aria-hidden=\"true\"></i>",
    "        Work Center: {{bezl.vars.selectedWorkCenter || 'Please Select'}}",
    "      </button>",
    "",
    "      <div style=\"margin-left: 15px\" *ngIf=\"bezl.vars.workCenterExpand\">",
    "        <div class=\"btn-group\" data-toggle=\"buttons\">",
    "          <label class=\"btn btn-default\" [ngClass]=\"{'active': bezl.vars.selectedWorkCenter == wc}\" *ngFor=\"let wc of bezl.vars.workCenters\" style=\"min-width: 120px\" (click)=\"bezl.vars.selectedWorkCenter = wc; bezl.vars.workCenterExpand = false\">",
    "            <input type=\"radio\" autocomplete=\"off\"> {{wc}}",
    "          </label>",
    "        </div>",
    "      </div>",
    "      ",
    "      <br>",
    "      <button type=\"button\" class=\"btn btn-default\" ",
    "              [disabled]=\"bezl.vars.saving ||bezl.vars.loading\" ",
    "              (click)=\"bezl.vars.locationExpand = !bezl.vars.locationExpand\" style=\"margin-left: 15px; width: 90%\">",
    "        <i class=\"fa fa-filter\" aria-hidden=\"true\"></i>",
    "        Location: {{bezl.vars.selectedLocation || 'All'}}",
    "      </button>",
    "",
    "      <div style=\"margin-left: 15px\" *ngIf=\"bezl.vars.locationExpand\">",
    "        <div class=\"btn-group\" data-toggle=\"buttons\">",
    "          <label class=\"btn btn-default\" [ngClass]=\"{'active': bezl.vars.selectedLocation == null}\" style=\"min-width: 120px\" (click)=\"bezl.vars.selectedLocation = null; bezl.vars.locationExpand = false\">",
    "            <input type=\"radio\" checked autocomplete=\"off\"> All",
    "          </label>",
    "          <label class=\"btn btn-default\" [ngClass]=\"{'active': bezl.vars.selectedLocation == location}\"  *ngFor=\"let location of bezl.vars.locations\" style=\"min-width: 120px\" (click)=\"bezl.vars.selectedLocation = location; bezl.vars.locationExpand = false\">",
    "            <input type=\"radio\" autocomplete=\"off\"> {{location}}",
    "          </label>",
    "        </div>",
    "      </div>",
    "",
    "      <div id=\"jobQueue\" class=\"panel-body\">",
    "        <!-- Individual job operation cards -->",
    "        <div *ngFor=\"let j of bezl.data.JobSchedule\">",
    "          <div class=\"panel panel-hover\" [hidden]=\"j.WorkCenter != bezl.vars.selectedWorkCenter || (j.ResourceID && j.ResourceID != ' ')\">",
    "            <div class=\"panel-body\" id=\"queueJob{{j.UniqueID}}\">",
    "              <strong>{{j.JobNumber}}.{{j.JobSequence}} ({{j.WorkCenter}})</strong>",
    "              <span class=\"label label-danger pull-right\" *ngIf=\"j.PastDue\">Due: {{j.DueDate | date}}</span>",
    "              <span class=\"label label-warning pull-right\" *ngIf=\"j.DueToday\">Due: {{j.DueDate | date}}</span>",
    "              <span class=\"label label-info pull-right\" *ngIf=\"!j.PastDue && !j.DueToday\">Due: {{j.DueDate | date}}</span>",
    "              <br>{{j.JobDesc}}",
    "              <br>Customer: {{j.CustomerName}}",
    "              <br>Qty: {{j.ReqQty}}",
    "            </div>",
    "          </div>",
    "        </div>",
    "        <!-- END: Individual job operation cards -->   ",
    "      </div>",
    "",
    "    </div>",
    "  </div>",
    "",
    "  <div class=\"col-sm-9\">",
    "    <div class=\"panel panel-default\" style=\"overflow:vertical\">",
    "      <div class=\"panel-heading\">",
    "        <h3 class=\"panel-title\">",
    "          Resources",
    "          ",
    "          <button (click)=\"bezl.functions['saveChanges']()\" class=\"btn btn-md btn-primary pull-right\" style=\"margin-top: 5px\">",
    "            <i class=\"fa fa-floppy-o\"></i>",
    "            Save Changes",
    "          </button>",
    "          ",
    "        </h3>",
    "      </div>",
    "",
    "      <div class=\"row\">",
    "        <div *ngFor=\"let r of bezl.data.Resources\">",
    "          <div class=\"col-sm-4\" ",
    "               *ngIf=\"!r.hide\"",
    "               [hidden]=\"(r.Location != bezl.vars.selectedLocation && bezl.vars.selectedLocation) || r.WorkCenter != bezl.vars.selectedWorkCenter\">",
    "            <div class=\"panel\">",
    "              <div class=\"panel-heading\">",
    "                <h4 class=\"panel-title\">{{r.Location}}: {{r.ResourceName}}</h4>",
    "              </div>",
    "              <div class=\"panel-body\" id=\"resource{{r.ResourceID}}\">",
    "                ",
    "                <!-- Individual job operation cards -->",
    "                <div *ngFor=\"let j of r.Jobs\">",
    "                  <div class=\"panel panel-hover\" [hidden]=\"j.Hide\">",
    "                    <div class=\"panel-body\" id=\"resourceJob{{j.UniqueID}}\">",
    "                      <strong>{{j.JobNumber}}.{{j.JobSequence}} ({{j.WorkCenter}})</strong>",
    "                      <span class=\"label label-danger pull-right\" *ngIf=\"j.PastDue\">Due: {{j.DueDate | date}}</span>",
    "                      <span class=\"label label-warning pull-right\" *ngIf=\"j.DueToday\">Due: {{j.DueDate | date}}</span>",
    "                      <span class=\"label label-info pull-right\" *ngIf=\"!j.PastDue && !j.DueToday\">Due: {{j.DueDate | date}}</span>",
    "                      <br>{{j.JobDesc}}",
    "                      <br>Customer: {{j.CustomerName}}",
    "                      <br>Qty: {{j.ReqQty}}                      ",
    "                    </div>",
    "                  </div>",
    "                </div>",
    "                <!-- END: Individual job operation cards -->  ",
    "                ",
    "              </div>",
    "                ",
    "            </div>",
    "          </div>",
    "        </div>",
    "      </div>",
    "    </div>",
    "  </div>",
    "</div>",
    "",
    ""
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.vars.loading = true;\nbezl.vars.locations = [];\n\n// Configure drang and drop\nbezl.vars.dragList = [];\n\nsetTimeout(function(){ \n  require(['https://cdn.rawgit.com/bevacqua/dragula/7b9d90ed/dist/dragula.js'], function(dragula) {\n    \n    // Add each of the elements we want to make draggable to dragList\n    bezl.vars.dragList.push(document.getElementById('jobQueue'));\n    \n    // Now make them draggable with options we may wish to configure\n    bezl.vars.drake = dragula(bezl.vars.dragList,{\n      isContainer: function (el) {\n        return false; // only elements in drake.containers will be taken into account\n      },\n      moves: function (el, source, handle, sibling) {\n        return true; // elements are always draggable by default\n      },\n      accepts: function (el, target, source, sibling) {\n        return true; // elements can be dropped in any of the `containers` by default\n      },\n      invalid: function (el, handle) {\n        return false; // don't prevent any drags from initiating by default\n      },\n      direction: 'vertical',             // Y axis is considered when determining where an element would be dropped\n      copy: false,                       // elements are moved by default, not copied\n      copySortSource: false,             // elements in copy-source containers can be reordered\n      revertOnSpill: true,              // spilling will put the element back where it was dragged from, if this is true\n      removeOnSpill: false,              // spilling will `.remove` the element, if this is true\n      mirrorContainer: document.body,    // set the element that gets mirror elements appended\n      ignoreInputTextSelection: true     // allows users to select input text, see details below\n    });    \n  });\n}, 100);\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.loading = true;\r\nbezl.vars.locations = [];\r\n// Configure drang and drop\r\nbezl.vars.dragList = [];\r\nsetTimeout(function () {\r\n    require(['https://cdn.rawgit.com/bevacqua/dragula/7b9d90ed/dist/dragula.js'], function (dragula) {\r\n        // Add each of the elements we want to make draggable to dragList\r\n        bezl.vars.dragList.push(document.getElementById('jobQueue'));\r\n        // Now make them draggable with options we may wish to configure\r\n        bezl.vars.drake = dragula(bezl.vars.dragList, {\r\n            isContainer: function (el) {\r\n                return false; // only elements in drake.containers will be taken into account\r\n            },\r\n            moves: function (el, source, handle, sibling) {\r\n                return true; // elements are always draggable by default\r\n            },\r\n            accepts: function (el, target, source, sibling) {\r\n                return true; // elements can be dropped in any of the `containers` by default\r\n            },\r\n            invalid: function (el, handle) {\r\n                return false; // don't prevent any drags from initiating by default\r\n            },\r\n            direction: 'vertical',\r\n            copy: false,\r\n            copySortSource: false,\r\n            revertOnSpill: true,\r\n            removeOnSpill: false,\r\n            mirrorContainer: document.body,\r\n            ignoreInputTextSelection: true // allows users to select input text, see details below\r\n        });\r\n    });\r\n}, 100);\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;\n\nif (bezl.data.JobSchedule && bezl.data.Resources && !bezl.data.SaveChanges) {\n  bezl.vars.loading = false;\n  \n  // Arrays used to hold summary data\n  bezl.vars.locations = [];\n  bezl.vars.workCenters = [];\n  \n  // Now loop through the job schedule to extract some details\n  bezl.data.JobSchedule.forEach(j => {\n    // Populate the location array\n    if (bezl.vars.locations.indexOf(j.Location) == -1) {\n\t\tbezl.vars.locations.push(j.Location);\n    }\n    \n    // Populate the work center array\n    if (bezl.vars.workCenters.indexOf(j.WorkCenter) == -1) {\n\t\tbezl.vars.workCenters.push(j.WorkCenter);\n    }\n  });\n  \n  bezl.data.Resources.forEach(r => {\n    // Add any assigned jobs to the resources\n    r.Jobs = [];\n    bezl.data.JobSchedule.forEach(j => {\n      if (j.ResourceID == r.ResourceID) {\n          r.Jobs.push(j);\n      }\n    });\n    \n    // Sort the jobs by resource sequence\n    r.Jobs.sort(function(a, b) {\n      return a.ResourceSequence - b.ResourceSequence;\n    });\n    \n    // Remove any resources if we don't have any jobs for their location\n    if (bezl.vars.locations.indexOf(r.Location) == -1) {\n      r.hide = true;\n    }\n    \n    // Enable drag and drop\n    setTimeout(function(){ \n      bezl.vars.drake.containers.push(document.getElementById('resource' + r.ResourceID));\n    }, 100);\n  });\n\n}\n\nif (bezl.data.SaveChanges) {\n\tbezl.vars.saving = false;\n  \tbezl.data.SaveChanges = null;\n  \tbezl.dataService.remove('SaveChanges');\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.data = dataResp;\r\nif (bezl.data.JobSchedule && bezl.data.Resources && !bezl.data.SaveChanges) {\r\n    bezl.vars.loading = false;\r\n    // Arrays used to hold summary data\r\n    bezl.vars.locations = [];\r\n    bezl.vars.workCenters = [];\r\n    // Now loop through the job schedule to extract some details\r\n    bezl.data.JobSchedule.forEach(function (j) {\r\n        // Populate the location array\r\n        if (bezl.vars.locations.indexOf(j.Location) == -1) {\r\n            bezl.vars.locations.push(j.Location);\r\n        }\r\n        // Populate the work center array\r\n        if (bezl.vars.workCenters.indexOf(j.WorkCenter) == -1) {\r\n            bezl.vars.workCenters.push(j.WorkCenter);\r\n        }\r\n    });\r\n    bezl.data.Resources.forEach(function (r) {\r\n        // Add any assigned jobs to the resources\r\n        r.Jobs = [];\r\n        bezl.data.JobSchedule.forEach(function (j) {\r\n            if (j.ResourceID == r.ResourceID) {\r\n                r.Jobs.push(j);\r\n            }\r\n        });\r\n        // Sort the jobs by resource sequence\r\n        r.Jobs.sort(function (a, b) {\r\n            return a.ResourceSequence - b.ResourceSequence;\r\n        });\r\n        // Remove any resources if we don't have any jobs for their location\r\n        if (bezl.vars.locations.indexOf(r.Location) == -1) {\r\n            r.hide = true;\r\n        }\r\n        // Enable drag and drop\r\n        setTimeout(function () {\r\n            bezl.vars.drake.containers.push(document.getElementById('resource' + r.ResourceID));\r\n        }, 100);\r\n    });\r\n}\r\nif (bezl.data.SaveChanges) {\r\n    bezl.vars.saving = false;\r\n    bezl.data.SaveChanges = null;\r\n    bezl.dataService.remove('SaveChanges');\r\n}\r\n"
    },
    {
      "method": "refresh",
      "code": "bezl.dataService.process('JobSchedule');",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.dataService.process('JobSchedule');\r\n"
    },
    {
      "method": "selectWorkCenter",
      "code": "// First unselect all work centers that may have been previously selected\nbezl.data.WorkCenters.forEach(wc => {\n  if (wc != parm) {\n  \twc.selected = false;\n  }\n});\n\n// Now mark the one that was clicked as selected (or unselect)\nparm.selected = !parm.selected;\n\n// Also set a variable for selectedWorkCenter to control which machines we display\nif (parm.selected) {\n  bezl.vars.selectedWorkCenter = parm;\n} else {\n  bezl.vars.selectedWorkCenter = {};\n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "var FusionCharts; // First unselect all work centers that may have been previously selected\r\nbezl.data.WorkCenters.forEach(function (wc) {\r\n    if (wc != parm) {\r\n        wc.selected = false;\r\n    }\r\n});\r\n// Now mark the one that was clicked as selected (or unselect)\r\nparm.selected = !parm.selected;\r\n// Also set a variable for selectedWorkCenter to control which machines we display\r\nif (parm.selected) {\r\n    bezl.vars.selectedWorkCenter = parm;\r\n}\r\nelse {\r\n    bezl.vars.selectedWorkCenter = {};\r\n}\r\n"
    },
    {
      "method": "saveChanges",
      "code": "// Loop through the resource queues and update the job schedule accordingly.  Doing this by just\n// looking at DOM elements with jQuery.  We could also have done this with a bit more of a managed\n// set of arrays build on the onDrop events but this seemed easier, save for just being a little\n// harder to understand here.\n$('[id^=\"resource\"]').each(function(index, resource) {\n  var resourceId = resource.id.replace(/resource/i, '');\n  var resourceSequence = 10;\n\n  $(this).find('[id*=\"Job\"]').each(function(index, job) {    \n    // Update the given job with the assigned resource and sequence\n    var job = bezl.data.JobSchedule.find(j => j.UniqueID == job.id.replace(/queueJob/i, '').replace(/resourceJob/i, ''));\n    if (job) {\n      job.ResourceID = resourceId;\n      job.ResourceSequence = resourceSequence;\n\n      // Update bezl.data.Resources.Jobs as well\n      bezl.data.Resources.forEach(r => {\n        var rjob = r.Jobs.find(j => j.UniqueID == job);\n        if (rjob) {\n          job.ResourceID = resourceId;\n          job.ResourceSequence = resourceSequence;\n        }\n      });\n    }\n\n    resourceSequence += 10;\n  });\n});\n\n// Clear the resource ID from anything in the queue\n$('#jobQueue').each(function(index, queue) {\n  $(this).find('[id^=\"resourceJob\"]').each(function(index, job) {\n    console.log(job);\n    var js = bezl.data.JobSchedule.find(j => j.UniqueID == job.id.replace(/resourceJob/i, ''));\n    if (js) {\n\t\tjs.ResourceID = ' '; \n    }\n  });\n});\n\n// Now push the saved changes out. Any BRDB call is acceptable here, just keep the subscription name as 'SaveChanges' so that we can correctly monitor for success\nbezl.dataService.add(\n  'SaveChanges'\n  ,'brdb'\n  ,'ExcelPlugin'\n  ,'WriteFile'\n  , \n  { \n    FileName: \"c:\\\\Program Files (x86)\\\\Bezlio Remote Data Broker\\\\Data\\\\production.xlsx\"\n    , SheetName: \"Job Schedule\"\n    , FirstRowColumnNames: \"Yes\" \n    , SheetData: JSON.stringify(bezl.data.JobSchedule)\n  }\n  , 0);                 \n\nbezl.vars.saving = true;\n\n\n",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "var FusionCharts; // Loop through the resource queues and update the job schedule accordingly.  Doing this by just\r\n// looking at DOM elements with jQuery.  We could also have done this with a bit more of a managed\r\n// set of arrays build on the onDrop events but this seemed easier, save for just being a little\r\n// harder to understand here.\r\n$('[id^=\"resource\"]').each(function (index, resource) {\r\n    var resourceId = resource.id.replace(/resource/i, '');\r\n    var resourceSequence = 10;\r\n    $(this).find('[id*=\"Job\"]').each(function (index, job) {\r\n        // Update the given job with the assigned resource and sequence\r\n        var job = bezl.data.JobSchedule.find(function (j) { return j.UniqueID == job.id.replace(/queueJob/i, '').replace(/resourceJob/i, ''); });\r\n        if (job) {\r\n            job.ResourceID = resourceId;\r\n            job.ResourceSequence = resourceSequence;\r\n            // Update bezl.data.Resources.Jobs as well\r\n            bezl.data.Resources.forEach(function (r) {\r\n                var rjob = r.Jobs.find(function (j) { return j.UniqueID == job; });\r\n                if (rjob) {\r\n                    job.ResourceID = resourceId;\r\n                    job.ResourceSequence = resourceSequence;\r\n                }\r\n            });\r\n        }\r\n        resourceSequence += 10;\r\n    });\r\n});\r\n// Clear the resource ID from anything in the queue\r\n$('#jobQueue').each(function (index, queue) {\r\n    $(this).find('[id^=\"resourceJob\"]').each(function (index, job) {\r\n        console.log(job);\r\n        var js = bezl.data.JobSchedule.find(function (j) { return j.UniqueID == job.id.replace(/resourceJob/i, ''); });\r\n        if (js) {\r\n            js.ResourceID = ' ';\r\n        }\r\n    });\r\n});\r\n// Now push the saved changes out. Any BRDB call is acceptable here, just keep the subscription name as 'SaveChanges' so that we can correctly monitor for success\r\nbezl.dataService.add('SaveChanges', 'brdb', 'ExcelPlugin', 'WriteFile', {\r\n    FileName: \"c:\\\\Program Files (x86)\\\\Bezlio Remote Data Broker\\\\Data\\\\production.xlsx\",\r\n    SheetName: \"Job Schedule\",\r\n    FirstRowColumnNames: \"Yes\",\r\n    SheetData: JSON.stringify(bezl.data.JobSchedule)\r\n}, 0);\r\nbezl.vars.saving = true;\r\n"
    }
  ],
  "data": ""
}