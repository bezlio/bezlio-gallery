{
  "id": "aedb403d-140e-4208-aaec-b8f1ad004fb2",
  "name": "JobView",
  "template": "custom",
  "owner": "kmansfield@saberlogic.com",
  "shares": [],
  "vars": [],
  "dataSubscriptions": [
    {
      "name": "jobOpInfo",
      "connectionId": "3a1a2559-fc68-47f9-9468-6b4db1cb348f",
      "dataSource": "brdb",
      "plugin": "ExcelPlugin",
      "method": "GetData",
      "args": {
        "FileName": "c:\\Program Files (x86)\\Bezlio Remote Data Broker\\Data\\job-operations.xlsx",
        "SheetName": "JobOps",
        "FirstRowColumnNames": "Yes"
      },
      "data": null,
      "refreshInverval": 0,
      "lastRefresh": null
    }
  ],
  "markup": [
    "<style>",
    "  @media screen and (max-width: 420px) {",
    "    button.job-schedule-btn {",
    "      /* Change button to full width on small screen */",
    "      display: block;",
    "      width: 100%;",
    "    }",
    "    div.job-schedule-search {",
    "      text-align: center;",
    "    }",
    "  }",
    "</style>",
    "<div class=\"panel\">",
    "  <div class=\"pad-all job-schedule-search\" style=\"margin-top: 15px;\">",
    "    <label class=\"text-lg text-semibold\" style=\"display: block; margin-bottom: 10px;\" for=\"jobNumber\">Job Schedule - Gantt Chart</label>",
    "    <input class=\"form-control\" id=\"jobNumber\" #jobNumber type=\"search\" placeholder=\"Enter Job Number\" style=\"border-color: #ccc;\">  ",
    "    <button class=\"btn btn-default btn-primary job-schedule-btn\" id=\"btnSearch\" #btnSearch (click)=\"bezl.functions['jobSearch'](jobNumber)\" style=\"margin-top: 10px;\">Search</button>",
    "  </div>",
    "  <div class=\"pad-all\">",
    "    <div id=\"chartContainer\"></div>",
    "  </div>",
    "</div>"
  ],
  "functions": [
    {
      "method": "ngOnInit",
      "code": "bezl.vars.refreshing = true;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.vars.refreshing = true;\r\n"
    },
    {
      "method": "onDataChange",
      "code": "bezl.data = dataResp;",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "bezl.data = dataResp;\r\n"
    },
    {
      "method": "jobSearch",
      "code": "var jobNumber = parm.value;\n\nif(bezl.data.jobOpInfo != null && jobNumber.trim() != \"\")\n{  \n  var jobs = [];\n  \n  bezl.data.jobOpInfo.forEach(j => {\n    if(j.JobNum == jobNumber.trim())\n      jobs.push(j);\n  });\n  \n  if(jobs.length > 0) //we have found operations for the selected job in the dataset\n  {\n    var startDate = new Date(0);\n    var endDate = new Date(0);\n    var firstFound = true;\n    \n    jobs.forEach(job => {\n    \tif(firstFound)\n        {\n          startDate = new Date(job.StartDate);\n          endDate = new Date(job.EndDate);\n          firstFound = false;\n        }\n      \n      \tif(new Date(job.StartDate) < startDate)\n          startDate = new Date(job.StartDate);\n      \n      \tif(new Date(job.EndDate) > endDate)\n          endDate = new Date(job.EndDate);\n      \n    });\n    \n    /*\n    //see how many days are between the two dates\n    var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds\n\tvar diffDays = Math.round(Math.abs((startDate.getTime() - endDate.getTime())/(oneDay)));\n    \n    if(diffDays < 50) //fill the dates so that things look normal    \n      endDate.setDate(endDate.getDate() + (50-diffDays));*/\n    \n    \n    //now that we know the start and end dates, we can put together the categories\n    bezl.vars.dataSource = {\n      chart: {\n        showtasknames: '1',\n        dateformat: 'mm/dd/yyyy',\n        caption: 'Job Operations for ' + jobNumber,\n        ganttpanedurationunit: \"d\",\n        ganttpaneduration: \"45\"\n      },\n      categories: [\n        {\n          bgcolor: \"333333\",\n          category: []\n        },\n        { bgcolor: \"99cc00\",\n          category: []}\n      ],\n      processes: {\n        \tisanimated: \"1\",\n        \tprocess: []\n    \t},\n      tasks: {\n      \ttask: []\n    \t}\n  \t};\n    \n    //now that we have the datastructure setup, we can create the necessary categories\n    //determine the months required    \n    \n    var groupEndDate = new Date(endDate.getMonth().toString() + \"/01/\" + endDate.getFullYear().toString());    \n    groupEndDate.setMonth(groupEndDate.getMonth() + 2);    \n    groupEndDate.setDate(groupEndDate.getDate() - 1);\n    \n    var groupStartDate = new Date((startDate.getMonth() + 1).toString() + \"/01/\" + startDate.getFullYear().toString());\n    \n    var catStartDate = new Date(groupStartDate.toString());\n    \n    while(catStartDate <= groupEndDate)\n    {      \n      var newStartDate = new Date(catStartDate.toString());     \n      \n      //determine end date of the month\n      catStartDate.setMonth(catStartDate.getMonth() + 1);\n      catStartDate.setDate(catStartDate.getDate() - 1);     \n      var newEndDate = new Date(catStartDate.toString());\n      var catName = \"\";\n      \n            //get the category name\n      switch(catStartDate.getMonth())\n      {\n        case 0:\n          catName = \"January \"\n          break;\n        case 1:\n          catName = \"February \";\n          break;\n        case 2:\n          catName = \"March \";\n          break;\n        case 3:\n          catName = \"April \";\n          break;\n        case 4:\n          catName = \"May \";\n          break;\n        case 5:\n          catName = \"June \";\n          break;\n        case 6:\n          catName = \"July \";\n          break;\n        case 7:\n          catName = \"August \";\n          break;\n        case 8:\n          catName = \"September \";\n          break;\n        case 9:\n          catName = \"October \";\n          break;\n        case 10:\n          catName = \"November \";\n          break;\n        case 11:\n          catName = \"December \";\n          break;\n      }\n      \n      catName += newEndDate.getFullYear().toString();\n      \n      var varStartDate = (newStartDate.getMonth() + 1).toString() + \"/\" + newStartDate.getDate().toString() + \"/\" + newStartDate.getFullYear().toString() + \" 00:00:00\";\n      var varEndDate = (newEndDate.getMonth() + 1).toString() + \"/\" + newEndDate.getDate().toString() + \"/\" + newEndDate.getFullYear().toString() + \" 23:59:59\";\n      \n      if(newStartDate < startDate)      \n        varStartDate = (startDate.getMonth() + 1).toString() + \"/\" + startDate.getDate().toString() + \"/\" + startDate.getFullYear().toString() + \" 00:00:00\";\n      else if(newEndDate.getMonth() == endDate.getMonth() && newEndDate.getFullYear() == endDate.getFullYear())\n        varEndDate = (endDate.getMonth() + 1).toString() + \"/\" + endDate.getDate().toString() + \"/\" + endDate.getFullYear().toString() + \" 23:59:59\";\n      \n      \n      var cat = {start: varStartDate,\n                  end: varEndDate,\n                  name: catName};\n      \n      bezl.vars.dataSource.categories[0].category.push(cat);            \n      \n      catStartDate.setDate(catStartDate.getDate() + 1);\n    }    \n    \n    //now write the secondary categories (the actual days themselves)\n    while(startDate <= endDate)\n    {\n      var cat = {start: (startDate.getMonth() + 1).toString() + \"/\" + startDate.getDate().toString() + \"/\" + startDate.getFullYear().toString() + \" 00:00:00\",\n                  end: (startDate.getMonth() + 1).toString() + \"/\" + startDate.getDate().toString() + \"/\" + startDate.getFullYear().toString() + \" 23:59:59\",\n                  name: startDate.getDate().toString()};\n      \n      bezl.vars.dataSource.categories[1].category.push(cat);\n      \n      startDate.setDate(startDate.getDate() + 1);\n    }\n    \n    //now, go through each of the jobs and create the appropriate process and task\n    var i = 1; //this will be the \"process ID\", as we dont't actually have one from the datasource, but could be modified to use an operation sequence, if that is available\n    jobs.forEach(job => {\n      var process = {name: job.OpDesc,\n                      id: i.toString()};\n      \n      bezl.vars.dataSource.processes.process.push(process);\n      \n      var jobStartDate = new Date(job.StartDate);\n      var jobEndDate = new Date(job.EndDate);\n      \n      var taskStartDate = (jobStartDate.getMonth() + 1).toString() + \"/\" + jobStartDate.getDate().toString() + \"/\" + jobStartDate.getFullYear().toString() + \" 00:00:00\";\n      var taskEndDate = (jobEndDate.getMonth() + 1).toString() + \"/\" + jobEndDate.getDate().toString() + \"/\" + jobEndDate.getFullYear().toString() + \" 23:59:59\";\n      \n      var task = {\n                   hovertext: job.OpDesc,\n                   processid: i.toString(),\n                   start: taskStartDate,\n                   end: taskEndDate\n                   };\n      \n      bezl.vars.dataSource.tasks.task.push(task);\n      i++;\n    });\n    \n    //now, that we have the entire datasource, now it's time to render the chart itself\n    try{      \n      \n      console.log(bezl.vars.dataSource);\n      \n      FusionCharts.options.SVGDefintionURL = 'absolute';\n      if  (FusionCharts('d7b7e0b1-484e-441d-bd35-3946773136dd')) {\n      \tFusionCharts('d7b7e0b1-484e-441d-bd35-3946773136dd').dispose();\n    \t}      \n      \n      bezl.vars.chart = new FusionCharts ({\n        type: 'gantt',\n        renderAt: $(bezl.container.nativeElement).find(\"#chartContainer\")[0],\n        width: '100%',\n        height: (($(bezl.container.nativeElement)[0].clientHeight > 500) ? $(bezl.container.nativeElement)[0].clientHeight - 85 : 500),\n        id: 'd7b7e0b1-484e-441d-bd35-3946773136dd',\n        dataFormat:'json',\n        dataSource: bezl.vars.dataSource\n      }).render();\n      \n    }\n    catch(err){\n      console.log(err);\n    }   \n    \n  }//end of jobs.length > 0\n  \n}",
      "declares": [
        "$",
        "parm",
        "bezl",
        "dataResp",
        "require",
        "FusionCharts"
      ],
      "compiled": "var jobNumber = parm.value;\r\nif (bezl.data.jobOpInfo != null && jobNumber.trim() != \"\") {\r\n    var jobs = [];\r\n    bezl.data.jobOpInfo.forEach(function (j) {\r\n        if (j.JobNum == jobNumber.trim())\r\n            jobs.push(j);\r\n    });\r\n    if (jobs.length > 0) {\r\n        var startDate = new Date(0);\r\n        var endDate = new Date(0);\r\n        var firstFound = true;\r\n        jobs.forEach(function (job) {\r\n            if (firstFound) {\r\n                startDate = new Date(job.StartDate);\r\n                endDate = new Date(job.EndDate);\r\n                firstFound = false;\r\n            }\r\n            if (new Date(job.StartDate) < startDate)\r\n                startDate = new Date(job.StartDate);\r\n            if (new Date(job.EndDate) > endDate)\r\n                endDate = new Date(job.EndDate);\r\n        });\r\n        /*\r\n        //see how many days are between the two dates\r\n        var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds\r\n        var diffDays = Math.round(Math.abs((startDate.getTime() - endDate.getTime())/(oneDay)));\r\n        \r\n        if(diffDays < 50) //fill the dates so that things look normal\r\n          endDate.setDate(endDate.getDate() + (50-diffDays));*/\r\n        //now that we know the start and end dates, we can put together the categories\r\n        bezl.vars.dataSource = {\r\n            chart: {\r\n                showtasknames: '1',\r\n                dateformat: 'mm/dd/yyyy',\r\n                caption: 'Job Operations for ' + jobNumber,\r\n                ganttpanedurationunit: \"d\",\r\n                ganttpaneduration: \"45\"\r\n            },\r\n            categories: [\r\n                {\r\n                    bgcolor: \"333333\",\r\n                    category: []\r\n                },\r\n                { bgcolor: \"99cc00\", category: [] }\r\n            ],\r\n            processes: {\r\n                isanimated: \"1\",\r\n                process: []\r\n            },\r\n            tasks: {\r\n                task: []\r\n            }\r\n        };\r\n        //now that we have the datastructure setup, we can create the necessary categories\r\n        //determine the months required    \r\n        var groupEndDate = new Date(endDate.getMonth().toString() + \"/01/\" + endDate.getFullYear().toString());\r\n        groupEndDate.setMonth(groupEndDate.getMonth() + 2);\r\n        groupEndDate.setDate(groupEndDate.getDate() - 1);\r\n        var groupStartDate = new Date((startDate.getMonth() + 1).toString() + \"/01/\" + startDate.getFullYear().toString());\r\n        var catStartDate = new Date(groupStartDate.toString());\r\n        while (catStartDate <= groupEndDate) {\r\n            var newStartDate = new Date(catStartDate.toString());\r\n            //determine end date of the month\r\n            catStartDate.setMonth(catStartDate.getMonth() + 1);\r\n            catStartDate.setDate(catStartDate.getDate() - 1);\r\n            var newEndDate = new Date(catStartDate.toString());\r\n            var catName = \"\";\r\n            switch (catStartDate.getMonth()) {\r\n                case 0:\r\n                    catName = \"January \";\r\n                    break;\r\n                case 1:\r\n                    catName = \"February \";\r\n                    break;\r\n                case 2:\r\n                    catName = \"March \";\r\n                    break;\r\n                case 3:\r\n                    catName = \"April \";\r\n                    break;\r\n                case 4:\r\n                    catName = \"May \";\r\n                    break;\r\n                case 5:\r\n                    catName = \"June \";\r\n                    break;\r\n                case 6:\r\n                    catName = \"July \";\r\n                    break;\r\n                case 7:\r\n                    catName = \"August \";\r\n                    break;\r\n                case 8:\r\n                    catName = \"September \";\r\n                    break;\r\n                case 9:\r\n                    catName = \"October \";\r\n                    break;\r\n                case 10:\r\n                    catName = \"November \";\r\n                    break;\r\n                case 11:\r\n                    catName = \"December \";\r\n                    break;\r\n            }\r\n            catName += newEndDate.getFullYear().toString();\r\n            var varStartDate = (newStartDate.getMonth() + 1).toString() + \"/\" + newStartDate.getDate().toString() + \"/\" + newStartDate.getFullYear().toString() + \" 00:00:00\";\r\n            var varEndDate = (newEndDate.getMonth() + 1).toString() + \"/\" + newEndDate.getDate().toString() + \"/\" + newEndDate.getFullYear().toString() + \" 23:59:59\";\r\n            if (newStartDate < startDate)\r\n                varStartDate = (startDate.getMonth() + 1).toString() + \"/\" + startDate.getDate().toString() + \"/\" + startDate.getFullYear().toString() + \" 00:00:00\";\r\n            else if (newEndDate.getMonth() == endDate.getMonth() && newEndDate.getFullYear() == endDate.getFullYear())\r\n                varEndDate = (endDate.getMonth() + 1).toString() + \"/\" + endDate.getDate().toString() + \"/\" + endDate.getFullYear().toString() + \" 23:59:59\";\r\n            var cat = { start: varStartDate, end: varEndDate, name: catName };\r\n            bezl.vars.dataSource.categories[0].category.push(cat);\r\n            catStartDate.setDate(catStartDate.getDate() + 1);\r\n        }\r\n        while (startDate <= endDate) {\r\n            var cat = { start: (startDate.getMonth() + 1).toString() + \"/\" + startDate.getDate().toString() + \"/\" + startDate.getFullYear().toString() + \" 00:00:00\", end: (startDate.getMonth() + 1).toString() + \"/\" + startDate.getDate().toString() + \"/\" + startDate.getFullYear().toString() + \" 23:59:59\", name: startDate.getDate().toString() };\r\n            bezl.vars.dataSource.categories[1].category.push(cat);\r\n            startDate.setDate(startDate.getDate() + 1);\r\n        }\r\n        //now, go through each of the jobs and create the appropriate process and task\r\n        var i = 1; //this will be the \"process ID\", as we dont't actually have one from the datasource, but could be modified to use an operation sequence, if that is available\r\n        jobs.forEach(function (job) {\r\n            var process = { name: job.OpDesc, id: i.toString() };\r\n            bezl.vars.dataSource.processes.process.push(process);\r\n            var jobStartDate = new Date(job.StartDate);\r\n            var jobEndDate = new Date(job.EndDate);\r\n            var taskStartDate = (jobStartDate.getMonth() + 1).toString() + \"/\" + jobStartDate.getDate().toString() + \"/\" + jobStartDate.getFullYear().toString() + \" 00:00:00\";\r\n            var taskEndDate = (jobEndDate.getMonth() + 1).toString() + \"/\" + jobEndDate.getDate().toString() + \"/\" + jobEndDate.getFullYear().toString() + \" 23:59:59\";\r\n            var task = {\r\n                hovertext: job.OpDesc,\r\n                processid: i.toString(),\r\n                start: taskStartDate,\r\n                end: taskEndDate\r\n            };\r\n            bezl.vars.dataSource.tasks.task.push(task);\r\n            i++;\r\n        });\r\n        try {\r\n            console.log(bezl.vars.dataSource);\r\n            FusionCharts.options.SVGDefintionURL = 'absolute';\r\n            if (FusionCharts('d7b7e0b1-484e-441d-bd35-3946773136dd')) {\r\n                FusionCharts('d7b7e0b1-484e-441d-bd35-3946773136dd').dispose();\r\n            }\r\n            bezl.vars.chart = new FusionCharts({\r\n                type: 'gantt',\r\n                renderAt: $(bezl.container.nativeElement).find(\"#chartContainer\")[0],\r\n                width: '100%',\r\n                height: (($(bezl.container.nativeElement)[0].clientHeight > 500) ? $(bezl.container.nativeElement)[0].clientHeight - 85 : 500),\r\n                id: 'd7b7e0b1-484e-441d-bd35-3946773136dd',\r\n                dataFormat: 'json',\r\n                dataSource: bezl.vars.dataSource\r\n            }).render();\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    } //end of jobs.length > 0\r\n}\r\n"
    }
  ],
  "data": ""
}